// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: rpcpb/services.proto

package rpcpb

import (
	context "context"
	clientpb "github.com/Kevin-kitnick/revils/protobuf/clientpb"
	commonpb "github.com/Kevin-kitnick/revils/protobuf/commonpb"
	revilspb "github.com/Kevin-kitnick/revils/protobuf/revilspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RevilsRPCClient is the client API for RevilsRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevilsRPCClient interface {
	// *** Version ***
	GetVersion(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Version, error)
	// *** Operator Commands ***
	GetOperators(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Operators, error)
	// *** Generic ***
	Kill(ctx context.Context, in *revilspb.KillReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	Reconfigure(ctx context.Context, in *revilspb.ReconfigureReq, opts ...grpc.CallOption) (*revilspb.Reconfigure, error)
	Rename(ctx context.Context, in *clientpb.RenameReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Sessions ***
	GetSessions(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error)
	// *** Beacons ***
	GetBeacons(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Beacons, error)
	GetBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.Beacon, error)
	RmBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*commonpb.Empty, error)
	GetBeaconTasks(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.BeaconTasks, error)
	GetBeaconTaskContent(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error)
	CancelBeaconTask(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error)
	// ***Threat monitoring ***
	MonitorStart(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Response, error)
	MonitorStop(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Jobs ***
	GetJobs(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error)
	KillJob(ctx context.Context, in *clientpb.KillJobReq, opts ...grpc.CallOption) (*clientpb.KillJob, error)
	// *** Listeners ***
	StartMTLSListener(ctx context.Context, in *clientpb.MTLSListenerReq, opts ...grpc.CallOption) (*clientpb.MTLSListener, error)
	StartWGListener(ctx context.Context, in *clientpb.WGListenerReq, opts ...grpc.CallOption) (*clientpb.WGListener, error)
	StartDNSListener(ctx context.Context, in *clientpb.DNSListenerReq, opts ...grpc.CallOption) (*clientpb.DNSListener, error)
	StartHTTPSListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error)
	StartHTTPListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error)
	// *** Stager Listener ***
	StartTCPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error)
	StartHTTPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error)
	// *** Loot ***
	LootAdd(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootRm(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*commonpb.Empty, error)
	LootUpdate(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootContent(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllLoot, error)
	LootAllOf(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.AllLoot, error)
	// *** Hosts ***
	Hosts(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllHosts, error)
	Host(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*clientpb.Host, error)
	HostRm(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*commonpb.Empty, error)
	HostIOCRm(ctx context.Context, in *clientpb.IOC, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Implants ***
	Generate(ctx context.Context, in *clientpb.GenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error)
	GenerateExternal(ctx context.Context, in *clientpb.ExternalGenerateReq, opts ...grpc.CallOption) (*clientpb.ExternalImplantConfig, error)
	GenerateExternalSaveBuild(ctx context.Context, in *clientpb.ExternalImplantBinary, opts ...grpc.CallOption) (*commonpb.Empty, error)
	GenerateExternalGetImplantConfig(ctx context.Context, in *clientpb.ImplantConfig, opts ...grpc.CallOption) (*clientpb.ExternalImplantConfig, error)
	BuilderRegister(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (RevilsRPC_BuilderRegisterClient, error)
	BuilderTrigger(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*commonpb.Empty, error)
	Builders(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Builders, error)
	Regenerate(ctx context.Context, in *clientpb.RegenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error)
	ImplantBuilds(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantBuilds, error)
	DeleteImplantBuild(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	Canaries(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Canaries, error)
	GenerateWGClientConfig(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.WGClientConfig, error)
	GenerateUniqueIP(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.UniqueWGIP, error)
	ImplantProfiles(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantProfiles, error)
	DeleteImplantProfile(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	SaveImplantProfile(ctx context.Context, in *clientpb.ImplantProfile, opts ...grpc.CallOption) (*clientpb.ImplantProfile, error)
	MsfStage(ctx context.Context, in *clientpb.MsfStagerReq, opts ...grpc.CallOption) (*clientpb.MsfStager, error)
	ShellcodeRDI(ctx context.Context, in *clientpb.ShellcodeRDIReq, opts ...grpc.CallOption) (*clientpb.ShellcodeRDI, error)
	GetCompiler(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Compiler, error)
	ShellcodeEncoder(ctx context.Context, in *clientpb.ShellcodeEncodeReq, opts ...grpc.CallOption) (*clientpb.ShellcodeEncode, error)
	ShellcodeEncoderMap(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ShellcodeEncoderMap, error)
	// *** Websites ***
	Websites(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Websites, error)
	Website(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteRemove(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*commonpb.Empty, error)
	WebsiteAddContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteUpdateContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteRemoveContent(ctx context.Context, in *clientpb.WebsiteRemoveContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	// *** Session Interactions ***
	Ping(ctx context.Context, in *revilspb.Ping, opts ...grpc.CallOption) (*revilspb.Ping, error)
	Ps(ctx context.Context, in *revilspb.PsReq, opts ...grpc.CallOption) (*revilspb.Ps, error)
	Terminate(ctx context.Context, in *revilspb.TerminateReq, opts ...grpc.CallOption) (*revilspb.Terminate, error)
	Ifconfig(ctx context.Context, in *revilspb.IfconfigReq, opts ...grpc.CallOption) (*revilspb.Ifconfig, error)
	Netstat(ctx context.Context, in *revilspb.NetstsatReq, opts ...grpc.CallOption) (*revilspb.Netstat, error)
	Ls(ctx context.Context, in *revilspb.LsReq, opts ...grpc.CallOption) (*revilspb.Ls, error)
	Cd(ctx context.Context, in *revilspb.CdReq, opts ...grpc.CallOption) (*revilspb.Pwd, error)
	Pwd(ctx context.Context, in *revilspb.PwdReq, opts ...grpc.CallOption) (*revilspb.Pwd, error)
	Mv(ctx context.Context, in *revilspb.MvReq, opts ...grpc.CallOption) (*revilspb.Mv, error)
	Rm(ctx context.Context, in *revilspb.RmReq, opts ...grpc.CallOption) (*revilspb.Rm, error)
	Mkdir(ctx context.Context, in *revilspb.MkdirReq, opts ...grpc.CallOption) (*revilspb.Mkdir, error)
	Download(ctx context.Context, in *revilspb.DownloadReq, opts ...grpc.CallOption) (*revilspb.Download, error)
	Upload(ctx context.Context, in *revilspb.UploadReq, opts ...grpc.CallOption) (*revilspb.Upload, error)
	Chmod(ctx context.Context, in *revilspb.ChmodReq, opts ...grpc.CallOption) (*revilspb.Chmod, error)
	Chown(ctx context.Context, in *revilspb.ChownReq, opts ...grpc.CallOption) (*revilspb.Chown, error)
	Chtimes(ctx context.Context, in *revilspb.ChtimesReq, opts ...grpc.CallOption) (*revilspb.Chtimes, error)
	MemfilesList(ctx context.Context, in *revilspb.MemfilesListReq, opts ...grpc.CallOption) (*revilspb.Ls, error)
	MemfilesAdd(ctx context.Context, in *revilspb.MemfilesAddReq, opts ...grpc.CallOption) (*revilspb.MemfilesAdd, error)
	MemfilesRm(ctx context.Context, in *revilspb.MemfilesRmReq, opts ...grpc.CallOption) (*revilspb.MemfilesRm, error)
	ProcessDump(ctx context.Context, in *revilspb.ProcessDumpReq, opts ...grpc.CallOption) (*revilspb.ProcessDump, error)
	RunAs(ctx context.Context, in *revilspb.RunAsReq, opts ...grpc.CallOption) (*revilspb.RunAs, error)
	Impersonate(ctx context.Context, in *revilspb.ImpersonateReq, opts ...grpc.CallOption) (*revilspb.Impersonate, error)
	RevToSelf(ctx context.Context, in *revilspb.RevToSelfReq, opts ...grpc.CallOption) (*revilspb.RevToSelf, error)
	GetSystem(ctx context.Context, in *clientpb.GetSystemReq, opts ...grpc.CallOption) (*revilspb.GetSystem, error)
	Task(ctx context.Context, in *revilspb.TaskReq, opts ...grpc.CallOption) (*revilspb.Task, error)
	Msf(ctx context.Context, in *clientpb.MSFReq, opts ...grpc.CallOption) (*revilspb.Task, error)
	MsfRemote(ctx context.Context, in *clientpb.MSFRemoteReq, opts ...grpc.CallOption) (*revilspb.Task, error)
	ExecuteAssembly(ctx context.Context, in *revilspb.ExecuteAssemblyReq, opts ...grpc.CallOption) (*revilspb.ExecuteAssembly, error)
	Migrate(ctx context.Context, in *clientpb.MigrateReq, opts ...grpc.CallOption) (*revilspb.Migrate, error)
	Execute(ctx context.Context, in *revilspb.ExecuteReq, opts ...grpc.CallOption) (*revilspb.Execute, error)
	ExecuteWindows(ctx context.Context, in *revilspb.ExecuteWindowsReq, opts ...grpc.CallOption) (*revilspb.Execute, error)
	Sideload(ctx context.Context, in *revilspb.SideloadReq, opts ...grpc.CallOption) (*revilspb.Sideload, error)
	SpawnDll(ctx context.Context, in *revilspb.InvokeSpawnDlllReq, opts ...grpc.CallOption) (*revilspb.SpawnDll, error)
	Screenshot(ctx context.Context, in *revilspb.ScreenshotReq, opts ...grpc.CallOption) (*revilspb.Screenshot, error)
	CurrentTokenOwner(ctx context.Context, in *revilspb.CurrentTokenOwnerReq, opts ...grpc.CallOption) (*revilspb.CurrentTokenOwner, error)
	// *** Pivots ***
	PivotStartListener(ctx context.Context, in *revilspb.PivotStartListenerReq, opts ...grpc.CallOption) (*revilspb.PivotListener, error)
	PivotStopListener(ctx context.Context, in *revilspb.PivotStopListenerReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	PivotSessionListeners(ctx context.Context, in *revilspb.PivotListenersReq, opts ...grpc.CallOption) (*revilspb.PivotListeners, error)
	PivotGraph(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.PivotGraph, error)
	StartService(ctx context.Context, in *revilspb.StartServiceReq, opts ...grpc.CallOption) (*revilspb.ServiceInfo, error)
	StopService(ctx context.Context, in *revilspb.StopServiceReq, opts ...grpc.CallOption) (*revilspb.ServiceInfo, error)
	RemoveService(ctx context.Context, in *revilspb.RemoveServiceReq, opts ...grpc.CallOption) (*revilspb.ServiceInfo, error)
	MakeToken(ctx context.Context, in *revilspb.MakeTokenReq, opts ...grpc.CallOption) (*revilspb.MakeToken, error)
	GetEnv(ctx context.Context, in *revilspb.EnvReq, opts ...grpc.CallOption) (*revilspb.EnvInfo, error)
	SetEnv(ctx context.Context, in *revilspb.SetEnvReq, opts ...grpc.CallOption) (*revilspb.SetEnv, error)
	UnsetEnv(ctx context.Context, in *revilspb.UnsetEnvReq, opts ...grpc.CallOption) (*revilspb.UnsetEnv, error)
	Backdoor(ctx context.Context, in *revilspb.BackdoorReq, opts ...grpc.CallOption) (*revilspb.Backdoor, error)
	RegistryRead(ctx context.Context, in *revilspb.RegistryReedReq, opts ...grpc.CallOption) (*revilspb.RegistryRead, error)
	RegistryWrite(ctx context.Context, in *revilspb.RegistryWriteReq, opts ...grpc.CallOption) (*revilspb.RegistryWrite, error)
	RegistryCreateKey(ctx context.Context, in *revilspb.RegistryCreateKeyReq, opts ...grpc.CallOption) (*revilspb.RegistryCreateKey, error)
	RegistryDeleteKey(ctx context.Context, in *revilspb.RegistryDeleteKeyReq, opts ...grpc.CallOption) (*revilspb.RegistryDeleteKey, error)
	RegistryListSubKeys(ctx context.Context, in *revilspb.RegistrySubKeyListReq, opts ...grpc.CallOption) (*revilspb.RegistrySubKeyList, error)
	RegistryListValues(ctx context.Context, in *revilspb.RegistryListValuesReq, opts ...grpc.CallOption) (*revilspb.RegistryValuesList, error)
	RunSSHCommand(ctx context.Context, in *revilspb.SSHCommandReq, opts ...grpc.CallOption) (*revilspb.SSHCommand, error)
	HijackDLL(ctx context.Context, in *clientpb.DllHijackReq, opts ...grpc.CallOption) (*clientpb.DllHijack, error)
	GetPrivs(ctx context.Context, in *revilspb.GetPrivsReq, opts ...grpc.CallOption) (*revilspb.GetPrivs, error)
	StartRportFwdListener(ctx context.Context, in *revilspb.RportFwdStartListenerReq, opts ...grpc.CallOption) (*revilspb.RportFwdListener, error)
	GetRportFwdListeners(ctx context.Context, in *revilspb.RportFwdListenersReq, opts ...grpc.CallOption) (*revilspb.RportFwdListeners, error)
	StopRportFwdListener(ctx context.Context, in *revilspb.RportFwdStopListenerReq, opts ...grpc.CallOption) (*revilspb.RportFwdListener, error)
	// Beacon only commands
	OpenSession(ctx context.Context, in *revilspb.OpenSession, opts ...grpc.CallOption) (*revilspb.OpenSession, error)
	CloseSession(ctx context.Context, in *revilspb.CloseSession, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// Extensions
	RegisterExtension(ctx context.Context, in *revilspb.RegisterExtensionReq, opts ...grpc.CallOption) (*revilspb.RegisterExtension, error)
	CallExtension(ctx context.Context, in *revilspb.CallExtensionReq, opts ...grpc.CallOption) (*revilspb.CallExtension, error)
	ListExtensions(ctx context.Context, in *revilspb.ListExtensionsReq, opts ...grpc.CallOption) (*revilspb.ListExtensions, error)
	// *** Wireguard Specific ***
	WGStartPortForward(ctx context.Context, in *revilspb.WGPortForwardStartReq, opts ...grpc.CallOption) (*revilspb.WGPortForward, error)
	WGStopPortForward(ctx context.Context, in *revilspb.WGPortForwardStopReq, opts ...grpc.CallOption) (*revilspb.WGPortForward, error)
	WGStartSocks(ctx context.Context, in *revilspb.WGSocksStartReq, opts ...grpc.CallOption) (*revilspb.WGSocks, error)
	WGStopSocks(ctx context.Context, in *revilspb.WGSocksStopReq, opts ...grpc.CallOption) (*revilspb.WGSocks, error)
	WGListForwarders(ctx context.Context, in *revilspb.WGTCPForwardersReq, opts ...grpc.CallOption) (*revilspb.WGTCPForwarders, error)
	WGListSocksServers(ctx context.Context, in *revilspb.WGSocksServersReq, opts ...grpc.CallOption) (*revilspb.WGSocksServers, error)
	// *** Realtime Commands ***
	Shell(ctx context.Context, in *revilspb.ShellReq, opts ...grpc.CallOption) (*revilspb.Shell, error)
	Portfwd(ctx context.Context, in *revilspb.PortfwdReq, opts ...grpc.CallOption) (*revilspb.Portfwd, error)
	// *** Socks5 ***
	CreateSocks(ctx context.Context, in *revilspb.Socks, opts ...grpc.CallOption) (*revilspb.Socks, error)
	CloseSocks(ctx context.Context, in *revilspb.Socks, opts ...grpc.CallOption) (*commonpb.Empty, error)
	SocksProxy(ctx context.Context, opts ...grpc.CallOption) (RevilsRPC_SocksProxyClient, error)
	// *** Tunnels ***
	CreateTunnel(ctx context.Context, in *revilspb.Tunnel, opts ...grpc.CallOption) (*revilspb.Tunnel, error)
	CloseTunnel(ctx context.Context, in *revilspb.Tunnel, opts ...grpc.CallOption) (*commonpb.Empty, error)
	TunnelData(ctx context.Context, opts ...grpc.CallOption) (RevilsRPC_TunnelDataClient, error)
	// *** Events ***
	Events(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (RevilsRPC_EventsClient, error)
}

type revilsRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRevilsRPCClient(cc grpc.ClientConnInterface) RevilsRPCClient {
	return &revilsRPCClient{cc}
}

func (c *revilsRPCClient) GetVersion(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Version, error) {
	out := new(clientpb.Version)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetOperators(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Operators, error) {
	out := new(clientpb.Operators)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Kill(ctx context.Context, in *revilspb.KillReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Reconfigure(ctx context.Context, in *revilspb.ReconfigureReq, opts ...grpc.CallOption) (*revilspb.Reconfigure, error) {
	out := new(revilspb.Reconfigure)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Reconfigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Rename(ctx context.Context, in *clientpb.RenameReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetSessions(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error) {
	out := new(clientpb.Sessions)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetBeacons(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Beacons, error) {
	out := new(clientpb.Beacons)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetBeacons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.Beacon, error) {
	out := new(clientpb.Beacon)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RmBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RmBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetBeaconTasks(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.BeaconTasks, error) {
	out := new(clientpb.BeaconTasks)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetBeaconTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetBeaconTaskContent(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error) {
	out := new(clientpb.BeaconTask)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetBeaconTaskContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) CancelBeaconTask(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error) {
	out := new(clientpb.BeaconTask)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/CancelBeaconTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) MonitorStart(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Response, error) {
	out := new(commonpb.Response)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/MonitorStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) MonitorStop(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/MonitorStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetJobs(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error) {
	out := new(clientpb.Jobs)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) KillJob(ctx context.Context, in *clientpb.KillJobReq, opts ...grpc.CallOption) (*clientpb.KillJob, error) {
	out := new(clientpb.KillJob)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/KillJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartMTLSListener(ctx context.Context, in *clientpb.MTLSListenerReq, opts ...grpc.CallOption) (*clientpb.MTLSListener, error) {
	out := new(clientpb.MTLSListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartMTLSListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartWGListener(ctx context.Context, in *clientpb.WGListenerReq, opts ...grpc.CallOption) (*clientpb.WGListener, error) {
	out := new(clientpb.WGListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartWGListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartDNSListener(ctx context.Context, in *clientpb.DNSListenerReq, opts ...grpc.CallOption) (*clientpb.DNSListener, error) {
	out := new(clientpb.DNSListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartDNSListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartHTTPSListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error) {
	out := new(clientpb.HTTPListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartHTTPSListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartHTTPListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error) {
	out := new(clientpb.HTTPListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartHTTPListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartTCPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error) {
	out := new(clientpb.StagerListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartTCPStagerListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartHTTPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error) {
	out := new(clientpb.StagerListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartHTTPStagerListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) LootAdd(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/LootAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) LootRm(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/LootRm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) LootUpdate(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/LootUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) LootContent(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/LootContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) LootAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllLoot, error) {
	out := new(clientpb.AllLoot)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/LootAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) LootAllOf(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.AllLoot, error) {
	out := new(clientpb.AllLoot)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/LootAllOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Hosts(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllHosts, error) {
	out := new(clientpb.AllHosts)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Host(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*clientpb.Host, error) {
	out := new(clientpb.Host)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Host", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) HostRm(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/HostRm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) HostIOCRm(ctx context.Context, in *clientpb.IOC, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/HostIOCRm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Generate(ctx context.Context, in *clientpb.GenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error) {
	out := new(clientpb.Generate)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GenerateExternal(ctx context.Context, in *clientpb.ExternalGenerateReq, opts ...grpc.CallOption) (*clientpb.ExternalImplantConfig, error) {
	out := new(clientpb.ExternalImplantConfig)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GenerateExternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GenerateExternalSaveBuild(ctx context.Context, in *clientpb.ExternalImplantBinary, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GenerateExternalSaveBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GenerateExternalGetImplantConfig(ctx context.Context, in *clientpb.ImplantConfig, opts ...grpc.CallOption) (*clientpb.ExternalImplantConfig, error) {
	out := new(clientpb.ExternalImplantConfig)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GenerateExternalGetImplantConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) BuilderRegister(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (RevilsRPC_BuilderRegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevilsRPC_ServiceDesc.Streams[0], "/rpcpb.RevilsRPC/BuilderRegister", opts...)
	if err != nil {
		return nil, err
	}
	x := &revilsRPCBuilderRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevilsRPC_BuilderRegisterClient interface {
	Recv() (*clientpb.Event, error)
	grpc.ClientStream
}

type revilsRPCBuilderRegisterClient struct {
	grpc.ClientStream
}

func (x *revilsRPCBuilderRegisterClient) Recv() (*clientpb.Event, error) {
	m := new(clientpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revilsRPCClient) BuilderTrigger(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/BuilderTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Builders(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Builders, error) {
	out := new(clientpb.Builders)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Builders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Regenerate(ctx context.Context, in *clientpb.RegenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error) {
	out := new(clientpb.Generate)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Regenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ImplantBuilds(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantBuilds, error) {
	out := new(clientpb.ImplantBuilds)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ImplantBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) DeleteImplantBuild(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/DeleteImplantBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Canaries(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Canaries, error) {
	out := new(clientpb.Canaries)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Canaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GenerateWGClientConfig(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.WGClientConfig, error) {
	out := new(clientpb.WGClientConfig)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GenerateWGClientConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GenerateUniqueIP(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.UniqueWGIP, error) {
	out := new(clientpb.UniqueWGIP)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GenerateUniqueIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ImplantProfiles(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantProfiles, error) {
	out := new(clientpb.ImplantProfiles)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ImplantProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) DeleteImplantProfile(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/DeleteImplantProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) SaveImplantProfile(ctx context.Context, in *clientpb.ImplantProfile, opts ...grpc.CallOption) (*clientpb.ImplantProfile, error) {
	out := new(clientpb.ImplantProfile)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/SaveImplantProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) MsfStage(ctx context.Context, in *clientpb.MsfStagerReq, opts ...grpc.CallOption) (*clientpb.MsfStager, error) {
	out := new(clientpb.MsfStager)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/MsfStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ShellcodeRDI(ctx context.Context, in *clientpb.ShellcodeRDIReq, opts ...grpc.CallOption) (*clientpb.ShellcodeRDI, error) {
	out := new(clientpb.ShellcodeRDI)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ShellcodeRDI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetCompiler(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Compiler, error) {
	out := new(clientpb.Compiler)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetCompiler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ShellcodeEncoder(ctx context.Context, in *clientpb.ShellcodeEncodeReq, opts ...grpc.CallOption) (*clientpb.ShellcodeEncode, error) {
	out := new(clientpb.ShellcodeEncode)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ShellcodeEncoder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ShellcodeEncoderMap(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ShellcodeEncoderMap, error) {
	out := new(clientpb.ShellcodeEncoderMap)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ShellcodeEncoderMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Websites(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Websites, error) {
	out := new(clientpb.Websites)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Websites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Website(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Website", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WebsiteRemove(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WebsiteRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WebsiteAddContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WebsiteAddContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WebsiteUpdateContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WebsiteUpdateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WebsiteRemoveContent(ctx context.Context, in *clientpb.WebsiteRemoveContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WebsiteRemoveContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Ping(ctx context.Context, in *revilspb.Ping, opts ...grpc.CallOption) (*revilspb.Ping, error) {
	out := new(revilspb.Ping)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Ps(ctx context.Context, in *revilspb.PsReq, opts ...grpc.CallOption) (*revilspb.Ps, error) {
	out := new(revilspb.Ps)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Ps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Terminate(ctx context.Context, in *revilspb.TerminateReq, opts ...grpc.CallOption) (*revilspb.Terminate, error) {
	out := new(revilspb.Terminate)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Ifconfig(ctx context.Context, in *revilspb.IfconfigReq, opts ...grpc.CallOption) (*revilspb.Ifconfig, error) {
	out := new(revilspb.Ifconfig)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Ifconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Netstat(ctx context.Context, in *revilspb.NetstsatReq, opts ...grpc.CallOption) (*revilspb.Netstat, error) {
	out := new(revilspb.Netstat)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Netstat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Ls(ctx context.Context, in *revilspb.LsReq, opts ...grpc.CallOption) (*revilspb.Ls, error) {
	out := new(revilspb.Ls)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Ls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Cd(ctx context.Context, in *revilspb.CdReq, opts ...grpc.CallOption) (*revilspb.Pwd, error) {
	out := new(revilspb.Pwd)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Cd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Pwd(ctx context.Context, in *revilspb.PwdReq, opts ...grpc.CallOption) (*revilspb.Pwd, error) {
	out := new(revilspb.Pwd)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Pwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Mv(ctx context.Context, in *revilspb.MvReq, opts ...grpc.CallOption) (*revilspb.Mv, error) {
	out := new(revilspb.Mv)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Mv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Rm(ctx context.Context, in *revilspb.RmReq, opts ...grpc.CallOption) (*revilspb.Rm, error) {
	out := new(revilspb.Rm)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Rm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Mkdir(ctx context.Context, in *revilspb.MkdirReq, opts ...grpc.CallOption) (*revilspb.Mkdir, error) {
	out := new(revilspb.Mkdir)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Download(ctx context.Context, in *revilspb.DownloadReq, opts ...grpc.CallOption) (*revilspb.Download, error) {
	out := new(revilspb.Download)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Upload(ctx context.Context, in *revilspb.UploadReq, opts ...grpc.CallOption) (*revilspb.Upload, error) {
	out := new(revilspb.Upload)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Chmod(ctx context.Context, in *revilspb.ChmodReq, opts ...grpc.CallOption) (*revilspb.Chmod, error) {
	out := new(revilspb.Chmod)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Chmod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Chown(ctx context.Context, in *revilspb.ChownReq, opts ...grpc.CallOption) (*revilspb.Chown, error) {
	out := new(revilspb.Chown)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Chown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Chtimes(ctx context.Context, in *revilspb.ChtimesReq, opts ...grpc.CallOption) (*revilspb.Chtimes, error) {
	out := new(revilspb.Chtimes)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Chtimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) MemfilesList(ctx context.Context, in *revilspb.MemfilesListReq, opts ...grpc.CallOption) (*revilspb.Ls, error) {
	out := new(revilspb.Ls)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/MemfilesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) MemfilesAdd(ctx context.Context, in *revilspb.MemfilesAddReq, opts ...grpc.CallOption) (*revilspb.MemfilesAdd, error) {
	out := new(revilspb.MemfilesAdd)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/MemfilesAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) MemfilesRm(ctx context.Context, in *revilspb.MemfilesRmReq, opts ...grpc.CallOption) (*revilspb.MemfilesRm, error) {
	out := new(revilspb.MemfilesRm)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/MemfilesRm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ProcessDump(ctx context.Context, in *revilspb.ProcessDumpReq, opts ...grpc.CallOption) (*revilspb.ProcessDump, error) {
	out := new(revilspb.ProcessDump)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ProcessDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RunAs(ctx context.Context, in *revilspb.RunAsReq, opts ...grpc.CallOption) (*revilspb.RunAs, error) {
	out := new(revilspb.RunAs)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RunAs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Impersonate(ctx context.Context, in *revilspb.ImpersonateReq, opts ...grpc.CallOption) (*revilspb.Impersonate, error) {
	out := new(revilspb.Impersonate)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Impersonate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RevToSelf(ctx context.Context, in *revilspb.RevToSelfReq, opts ...grpc.CallOption) (*revilspb.RevToSelf, error) {
	out := new(revilspb.RevToSelf)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RevToSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetSystem(ctx context.Context, in *clientpb.GetSystemReq, opts ...grpc.CallOption) (*revilspb.GetSystem, error) {
	out := new(revilspb.GetSystem)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Task(ctx context.Context, in *revilspb.TaskReq, opts ...grpc.CallOption) (*revilspb.Task, error) {
	out := new(revilspb.Task)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Msf(ctx context.Context, in *clientpb.MSFReq, opts ...grpc.CallOption) (*revilspb.Task, error) {
	out := new(revilspb.Task)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Msf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) MsfRemote(ctx context.Context, in *clientpb.MSFRemoteReq, opts ...grpc.CallOption) (*revilspb.Task, error) {
	out := new(revilspb.Task)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/MsfRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ExecuteAssembly(ctx context.Context, in *revilspb.ExecuteAssemblyReq, opts ...grpc.CallOption) (*revilspb.ExecuteAssembly, error) {
	out := new(revilspb.ExecuteAssembly)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ExecuteAssembly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Migrate(ctx context.Context, in *clientpb.MigrateReq, opts ...grpc.CallOption) (*revilspb.Migrate, error) {
	out := new(revilspb.Migrate)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Migrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Execute(ctx context.Context, in *revilspb.ExecuteReq, opts ...grpc.CallOption) (*revilspb.Execute, error) {
	out := new(revilspb.Execute)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ExecuteWindows(ctx context.Context, in *revilspb.ExecuteWindowsReq, opts ...grpc.CallOption) (*revilspb.Execute, error) {
	out := new(revilspb.Execute)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ExecuteWindows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Sideload(ctx context.Context, in *revilspb.SideloadReq, opts ...grpc.CallOption) (*revilspb.Sideload, error) {
	out := new(revilspb.Sideload)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Sideload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) SpawnDll(ctx context.Context, in *revilspb.InvokeSpawnDlllReq, opts ...grpc.CallOption) (*revilspb.SpawnDll, error) {
	out := new(revilspb.SpawnDll)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/SpawnDll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Screenshot(ctx context.Context, in *revilspb.ScreenshotReq, opts ...grpc.CallOption) (*revilspb.Screenshot, error) {
	out := new(revilspb.Screenshot)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Screenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) CurrentTokenOwner(ctx context.Context, in *revilspb.CurrentTokenOwnerReq, opts ...grpc.CallOption) (*revilspb.CurrentTokenOwner, error) {
	out := new(revilspb.CurrentTokenOwner)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/CurrentTokenOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) PivotStartListener(ctx context.Context, in *revilspb.PivotStartListenerReq, opts ...grpc.CallOption) (*revilspb.PivotListener, error) {
	out := new(revilspb.PivotListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/PivotStartListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) PivotStopListener(ctx context.Context, in *revilspb.PivotStopListenerReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/PivotStopListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) PivotSessionListeners(ctx context.Context, in *revilspb.PivotListenersReq, opts ...grpc.CallOption) (*revilspb.PivotListeners, error) {
	out := new(revilspb.PivotListeners)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/PivotSessionListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) PivotGraph(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.PivotGraph, error) {
	out := new(clientpb.PivotGraph)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/PivotGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartService(ctx context.Context, in *revilspb.StartServiceReq, opts ...grpc.CallOption) (*revilspb.ServiceInfo, error) {
	out := new(revilspb.ServiceInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StopService(ctx context.Context, in *revilspb.StopServiceReq, opts ...grpc.CallOption) (*revilspb.ServiceInfo, error) {
	out := new(revilspb.ServiceInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RemoveService(ctx context.Context, in *revilspb.RemoveServiceReq, opts ...grpc.CallOption) (*revilspb.ServiceInfo, error) {
	out := new(revilspb.ServiceInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RemoveService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) MakeToken(ctx context.Context, in *revilspb.MakeTokenReq, opts ...grpc.CallOption) (*revilspb.MakeToken, error) {
	out := new(revilspb.MakeToken)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/MakeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetEnv(ctx context.Context, in *revilspb.EnvReq, opts ...grpc.CallOption) (*revilspb.EnvInfo, error) {
	out := new(revilspb.EnvInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) SetEnv(ctx context.Context, in *revilspb.SetEnvReq, opts ...grpc.CallOption) (*revilspb.SetEnv, error) {
	out := new(revilspb.SetEnv)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/SetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) UnsetEnv(ctx context.Context, in *revilspb.UnsetEnvReq, opts ...grpc.CallOption) (*revilspb.UnsetEnv, error) {
	out := new(revilspb.UnsetEnv)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/UnsetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Backdoor(ctx context.Context, in *revilspb.BackdoorReq, opts ...grpc.CallOption) (*revilspb.Backdoor, error) {
	out := new(revilspb.Backdoor)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Backdoor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RegistryRead(ctx context.Context, in *revilspb.RegistryReedReq, opts ...grpc.CallOption) (*revilspb.RegistryRead, error) {
	out := new(revilspb.RegistryRead)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RegistryRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RegistryWrite(ctx context.Context, in *revilspb.RegistryWriteReq, opts ...grpc.CallOption) (*revilspb.RegistryWrite, error) {
	out := new(revilspb.RegistryWrite)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RegistryWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RegistryCreateKey(ctx context.Context, in *revilspb.RegistryCreateKeyReq, opts ...grpc.CallOption) (*revilspb.RegistryCreateKey, error) {
	out := new(revilspb.RegistryCreateKey)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RegistryCreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RegistryDeleteKey(ctx context.Context, in *revilspb.RegistryDeleteKeyReq, opts ...grpc.CallOption) (*revilspb.RegistryDeleteKey, error) {
	out := new(revilspb.RegistryDeleteKey)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RegistryDeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RegistryListSubKeys(ctx context.Context, in *revilspb.RegistrySubKeyListReq, opts ...grpc.CallOption) (*revilspb.RegistrySubKeyList, error) {
	out := new(revilspb.RegistrySubKeyList)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RegistryListSubKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RegistryListValues(ctx context.Context, in *revilspb.RegistryListValuesReq, opts ...grpc.CallOption) (*revilspb.RegistryValuesList, error) {
	out := new(revilspb.RegistryValuesList)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RegistryListValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RunSSHCommand(ctx context.Context, in *revilspb.SSHCommandReq, opts ...grpc.CallOption) (*revilspb.SSHCommand, error) {
	out := new(revilspb.SSHCommand)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RunSSHCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) HijackDLL(ctx context.Context, in *clientpb.DllHijackReq, opts ...grpc.CallOption) (*clientpb.DllHijack, error) {
	out := new(clientpb.DllHijack)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/HijackDLL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetPrivs(ctx context.Context, in *revilspb.GetPrivsReq, opts ...grpc.CallOption) (*revilspb.GetPrivs, error) {
	out := new(revilspb.GetPrivs)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetPrivs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StartRportFwdListener(ctx context.Context, in *revilspb.RportFwdStartListenerReq, opts ...grpc.CallOption) (*revilspb.RportFwdListener, error) {
	out := new(revilspb.RportFwdListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StartRportFwdListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) GetRportFwdListeners(ctx context.Context, in *revilspb.RportFwdListenersReq, opts ...grpc.CallOption) (*revilspb.RportFwdListeners, error) {
	out := new(revilspb.RportFwdListeners)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/GetRportFwdListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) StopRportFwdListener(ctx context.Context, in *revilspb.RportFwdStopListenerReq, opts ...grpc.CallOption) (*revilspb.RportFwdListener, error) {
	out := new(revilspb.RportFwdListener)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/StopRportFwdListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) OpenSession(ctx context.Context, in *revilspb.OpenSession, opts ...grpc.CallOption) (*revilspb.OpenSession, error) {
	out := new(revilspb.OpenSession)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/OpenSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) CloseSession(ctx context.Context, in *revilspb.CloseSession, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) RegisterExtension(ctx context.Context, in *revilspb.RegisterExtensionReq, opts ...grpc.CallOption) (*revilspb.RegisterExtension, error) {
	out := new(revilspb.RegisterExtension)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/RegisterExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) CallExtension(ctx context.Context, in *revilspb.CallExtensionReq, opts ...grpc.CallOption) (*revilspb.CallExtension, error) {
	out := new(revilspb.CallExtension)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/CallExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) ListExtensions(ctx context.Context, in *revilspb.ListExtensionsReq, opts ...grpc.CallOption) (*revilspb.ListExtensions, error) {
	out := new(revilspb.ListExtensions)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/ListExtensions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WGStartPortForward(ctx context.Context, in *revilspb.WGPortForwardStartReq, opts ...grpc.CallOption) (*revilspb.WGPortForward, error) {
	out := new(revilspb.WGPortForward)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WGStartPortForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WGStopPortForward(ctx context.Context, in *revilspb.WGPortForwardStopReq, opts ...grpc.CallOption) (*revilspb.WGPortForward, error) {
	out := new(revilspb.WGPortForward)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WGStopPortForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WGStartSocks(ctx context.Context, in *revilspb.WGSocksStartReq, opts ...grpc.CallOption) (*revilspb.WGSocks, error) {
	out := new(revilspb.WGSocks)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WGStartSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WGStopSocks(ctx context.Context, in *revilspb.WGSocksStopReq, opts ...grpc.CallOption) (*revilspb.WGSocks, error) {
	out := new(revilspb.WGSocks)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WGStopSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WGListForwarders(ctx context.Context, in *revilspb.WGTCPForwardersReq, opts ...grpc.CallOption) (*revilspb.WGTCPForwarders, error) {
	out := new(revilspb.WGTCPForwarders)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WGListForwarders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) WGListSocksServers(ctx context.Context, in *revilspb.WGSocksServersReq, opts ...grpc.CallOption) (*revilspb.WGSocksServers, error) {
	out := new(revilspb.WGSocksServers)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/WGListSocksServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Shell(ctx context.Context, in *revilspb.ShellReq, opts ...grpc.CallOption) (*revilspb.Shell, error) {
	out := new(revilspb.Shell)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Shell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) Portfwd(ctx context.Context, in *revilspb.PortfwdReq, opts ...grpc.CallOption) (*revilspb.Portfwd, error) {
	out := new(revilspb.Portfwd)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/Portfwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) CreateSocks(ctx context.Context, in *revilspb.Socks, opts ...grpc.CallOption) (*revilspb.Socks, error) {
	out := new(revilspb.Socks)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/CreateSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) CloseSocks(ctx context.Context, in *revilspb.Socks, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/CloseSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) SocksProxy(ctx context.Context, opts ...grpc.CallOption) (RevilsRPC_SocksProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevilsRPC_ServiceDesc.Streams[1], "/rpcpb.RevilsRPC/SocksProxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &revilsRPCSocksProxyClient{stream}
	return x, nil
}

type RevilsRPC_SocksProxyClient interface {
	Send(*revilspb.SocksData) error
	Recv() (*revilspb.SocksData, error)
	grpc.ClientStream
}

type revilsRPCSocksProxyClient struct {
	grpc.ClientStream
}

func (x *revilsRPCSocksProxyClient) Send(m *revilspb.SocksData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *revilsRPCSocksProxyClient) Recv() (*revilspb.SocksData, error) {
	m := new(revilspb.SocksData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revilsRPCClient) CreateTunnel(ctx context.Context, in *revilspb.Tunnel, opts ...grpc.CallOption) (*revilspb.Tunnel, error) {
	out := new(revilspb.Tunnel)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) CloseTunnel(ctx context.Context, in *revilspb.Tunnel, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.RevilsRPC/CloseTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revilsRPCClient) TunnelData(ctx context.Context, opts ...grpc.CallOption) (RevilsRPC_TunnelDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevilsRPC_ServiceDesc.Streams[2], "/rpcpb.RevilsRPC/TunnelData", opts...)
	if err != nil {
		return nil, err
	}
	x := &revilsRPCTunnelDataClient{stream}
	return x, nil
}

type RevilsRPC_TunnelDataClient interface {
	Send(*revilspb.TunnelData) error
	Recv() (*revilspb.TunnelData, error)
	grpc.ClientStream
}

type revilsRPCTunnelDataClient struct {
	grpc.ClientStream
}

func (x *revilsRPCTunnelDataClient) Send(m *revilspb.TunnelData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *revilsRPCTunnelDataClient) Recv() (*revilspb.TunnelData, error) {
	m := new(revilspb.TunnelData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revilsRPCClient) Events(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (RevilsRPC_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevilsRPC_ServiceDesc.Streams[3], "/rpcpb.RevilsRPC/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &revilsRPCEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevilsRPC_EventsClient interface {
	Recv() (*clientpb.Event, error)
	grpc.ClientStream
}

type revilsRPCEventsClient struct {
	grpc.ClientStream
}

func (x *revilsRPCEventsClient) Recv() (*clientpb.Event, error) {
	m := new(clientpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RevilsRPCServer is the server API for RevilsRPC service.
// All implementations must embed UnimplementedRevilsRPCServer
// for forward compatibility
type RevilsRPCServer interface {
	// *** Version ***
	GetVersion(context.Context, *commonpb.Empty) (*clientpb.Version, error)
	// *** Operator Commands ***
	GetOperators(context.Context, *commonpb.Empty) (*clientpb.Operators, error)
	// *** Generic ***
	Kill(context.Context, *revilspb.KillReq) (*commonpb.Empty, error)
	Reconfigure(context.Context, *revilspb.ReconfigureReq) (*revilspb.Reconfigure, error)
	Rename(context.Context, *clientpb.RenameReq) (*commonpb.Empty, error)
	// *** Sessions ***
	GetSessions(context.Context, *commonpb.Empty) (*clientpb.Sessions, error)
	// *** Beacons ***
	GetBeacons(context.Context, *commonpb.Empty) (*clientpb.Beacons, error)
	GetBeacon(context.Context, *clientpb.Beacon) (*clientpb.Beacon, error)
	RmBeacon(context.Context, *clientpb.Beacon) (*commonpb.Empty, error)
	GetBeaconTasks(context.Context, *clientpb.Beacon) (*clientpb.BeaconTasks, error)
	GetBeaconTaskContent(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error)
	CancelBeaconTask(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error)
	// ***Threat monitoring ***
	MonitorStart(context.Context, *commonpb.Empty) (*commonpb.Response, error)
	MonitorStop(context.Context, *commonpb.Empty) (*commonpb.Empty, error)
	// *** Jobs ***
	GetJobs(context.Context, *commonpb.Empty) (*clientpb.Jobs, error)
	KillJob(context.Context, *clientpb.KillJobReq) (*clientpb.KillJob, error)
	// *** Listeners ***
	StartMTLSListener(context.Context, *clientpb.MTLSListenerReq) (*clientpb.MTLSListener, error)
	StartWGListener(context.Context, *clientpb.WGListenerReq) (*clientpb.WGListener, error)
	StartDNSListener(context.Context, *clientpb.DNSListenerReq) (*clientpb.DNSListener, error)
	StartHTTPSListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error)
	StartHTTPListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error)
	// *** Stager Listener ***
	StartTCPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error)
	StartHTTPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error)
	// *** Loot ***
	LootAdd(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootRm(context.Context, *clientpb.Loot) (*commonpb.Empty, error)
	LootUpdate(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootContent(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootAll(context.Context, *commonpb.Empty) (*clientpb.AllLoot, error)
	LootAllOf(context.Context, *clientpb.Loot) (*clientpb.AllLoot, error)
	// *** Hosts ***
	Hosts(context.Context, *commonpb.Empty) (*clientpb.AllHosts, error)
	Host(context.Context, *clientpb.Host) (*clientpb.Host, error)
	HostRm(context.Context, *clientpb.Host) (*commonpb.Empty, error)
	HostIOCRm(context.Context, *clientpb.IOC) (*commonpb.Empty, error)
	// *** Implants ***
	Generate(context.Context, *clientpb.GenerateReq) (*clientpb.Generate, error)
	GenerateExternal(context.Context, *clientpb.ExternalGenerateReq) (*clientpb.ExternalImplantConfig, error)
	GenerateExternalSaveBuild(context.Context, *clientpb.ExternalImplantBinary) (*commonpb.Empty, error)
	GenerateExternalGetImplantConfig(context.Context, *clientpb.ImplantConfig) (*clientpb.ExternalImplantConfig, error)
	BuilderRegister(*clientpb.Builder, RevilsRPC_BuilderRegisterServer) error
	BuilderTrigger(context.Context, *clientpb.Event) (*commonpb.Empty, error)
	Builders(context.Context, *commonpb.Empty) (*clientpb.Builders, error)
	Regenerate(context.Context, *clientpb.RegenerateReq) (*clientpb.Generate, error)
	ImplantBuilds(context.Context, *commonpb.Empty) (*clientpb.ImplantBuilds, error)
	DeleteImplantBuild(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error)
	Canaries(context.Context, *commonpb.Empty) (*clientpb.Canaries, error)
	GenerateWGClientConfig(context.Context, *commonpb.Empty) (*clientpb.WGClientConfig, error)
	GenerateUniqueIP(context.Context, *commonpb.Empty) (*clientpb.UniqueWGIP, error)
	ImplantProfiles(context.Context, *commonpb.Empty) (*clientpb.ImplantProfiles, error)
	DeleteImplantProfile(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error)
	SaveImplantProfile(context.Context, *clientpb.ImplantProfile) (*clientpb.ImplantProfile, error)
	MsfStage(context.Context, *clientpb.MsfStagerReq) (*clientpb.MsfStager, error)
	ShellcodeRDI(context.Context, *clientpb.ShellcodeRDIReq) (*clientpb.ShellcodeRDI, error)
	GetCompiler(context.Context, *commonpb.Empty) (*clientpb.Compiler, error)
	ShellcodeEncoder(context.Context, *clientpb.ShellcodeEncodeReq) (*clientpb.ShellcodeEncode, error)
	ShellcodeEncoderMap(context.Context, *commonpb.Empty) (*clientpb.ShellcodeEncoderMap, error)
	// *** Websites ***
	Websites(context.Context, *commonpb.Empty) (*clientpb.Websites, error)
	Website(context.Context, *clientpb.Website) (*clientpb.Website, error)
	WebsiteRemove(context.Context, *clientpb.Website) (*commonpb.Empty, error)
	WebsiteAddContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error)
	WebsiteUpdateContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error)
	WebsiteRemoveContent(context.Context, *clientpb.WebsiteRemoveContent) (*clientpb.Website, error)
	// *** Session Interactions ***
	Ping(context.Context, *revilspb.Ping) (*revilspb.Ping, error)
	Ps(context.Context, *revilspb.PsReq) (*revilspb.Ps, error)
	Terminate(context.Context, *revilspb.TerminateReq) (*revilspb.Terminate, error)
	Ifconfig(context.Context, *revilspb.IfconfigReq) (*revilspb.Ifconfig, error)
	Netstat(context.Context, *revilspb.NetstsatReq) (*revilspb.Netstat, error)
	Ls(context.Context, *revilspb.LsReq) (*revilspb.Ls, error)
	Cd(context.Context, *revilspb.CdReq) (*revilspb.Pwd, error)
	Pwd(context.Context, *revilspb.PwdReq) (*revilspb.Pwd, error)
	Mv(context.Context, *revilspb.MvReq) (*revilspb.Mv, error)
	Rm(context.Context, *revilspb.RmReq) (*revilspb.Rm, error)
	Mkdir(context.Context, *revilspb.MkdirReq) (*revilspb.Mkdir, error)
	Download(context.Context, *revilspb.DownloadReq) (*revilspb.Download, error)
	Upload(context.Context, *revilspb.UploadReq) (*revilspb.Upload, error)
	Chmod(context.Context, *revilspb.ChmodReq) (*revilspb.Chmod, error)
	Chown(context.Context, *revilspb.ChownReq) (*revilspb.Chown, error)
	Chtimes(context.Context, *revilspb.ChtimesReq) (*revilspb.Chtimes, error)
	MemfilesList(context.Context, *revilspb.MemfilesListReq) (*revilspb.Ls, error)
	MemfilesAdd(context.Context, *revilspb.MemfilesAddReq) (*revilspb.MemfilesAdd, error)
	MemfilesRm(context.Context, *revilspb.MemfilesRmReq) (*revilspb.MemfilesRm, error)
	ProcessDump(context.Context, *revilspb.ProcessDumpReq) (*revilspb.ProcessDump, error)
	RunAs(context.Context, *revilspb.RunAsReq) (*revilspb.RunAs, error)
	Impersonate(context.Context, *revilspb.ImpersonateReq) (*revilspb.Impersonate, error)
	RevToSelf(context.Context, *revilspb.RevToSelfReq) (*revilspb.RevToSelf, error)
	GetSystem(context.Context, *clientpb.GetSystemReq) (*revilspb.GetSystem, error)
	Task(context.Context, *revilspb.TaskReq) (*revilspb.Task, error)
	Msf(context.Context, *clientpb.MSFReq) (*revilspb.Task, error)
	MsfRemote(context.Context, *clientpb.MSFRemoteReq) (*revilspb.Task, error)
	ExecuteAssembly(context.Context, *revilspb.ExecuteAssemblyReq) (*revilspb.ExecuteAssembly, error)
	Migrate(context.Context, *clientpb.MigrateReq) (*revilspb.Migrate, error)
	Execute(context.Context, *revilspb.ExecuteReq) (*revilspb.Execute, error)
	ExecuteWindows(context.Context, *revilspb.ExecuteWindowsReq) (*revilspb.Execute, error)
	Sideload(context.Context, *revilspb.SideloadReq) (*revilspb.Sideload, error)
	SpawnDll(context.Context, *revilspb.InvokeSpawnDlllReq) (*revilspb.SpawnDll, error)
	Screenshot(context.Context, *revilspb.ScreenshotReq) (*revilspb.Screenshot, error)
	CurrentTokenOwner(context.Context, *revilspb.CurrentTokenOwnerReq) (*revilspb.CurrentTokenOwner, error)
	// *** Pivots ***
	PivotStartListener(context.Context, *revilspb.PivotStartListenerReq) (*revilspb.PivotListener, error)
	PivotStopListener(context.Context, *revilspb.PivotStopListenerReq) (*commonpb.Empty, error)
	PivotSessionListeners(context.Context, *revilspb.PivotListenersReq) (*revilspb.PivotListeners, error)
	PivotGraph(context.Context, *commonpb.Empty) (*clientpb.PivotGraph, error)
	StartService(context.Context, *revilspb.StartServiceReq) (*revilspb.ServiceInfo, error)
	StopService(context.Context, *revilspb.StopServiceReq) (*revilspb.ServiceInfo, error)
	RemoveService(context.Context, *revilspb.RemoveServiceReq) (*revilspb.ServiceInfo, error)
	MakeToken(context.Context, *revilspb.MakeTokenReq) (*revilspb.MakeToken, error)
	GetEnv(context.Context, *revilspb.EnvReq) (*revilspb.EnvInfo, error)
	SetEnv(context.Context, *revilspb.SetEnvReq) (*revilspb.SetEnv, error)
	UnsetEnv(context.Context, *revilspb.UnsetEnvReq) (*revilspb.UnsetEnv, error)
	Backdoor(context.Context, *revilspb.BackdoorReq) (*revilspb.Backdoor, error)
	RegistryRead(context.Context, *revilspb.RegistryReedReq) (*revilspb.RegistryRead, error)
	RegistryWrite(context.Context, *revilspb.RegistryWriteReq) (*revilspb.RegistryWrite, error)
	RegistryCreateKey(context.Context, *revilspb.RegistryCreateKeyReq) (*revilspb.RegistryCreateKey, error)
	RegistryDeleteKey(context.Context, *revilspb.RegistryDeleteKeyReq) (*revilspb.RegistryDeleteKey, error)
	RegistryListSubKeys(context.Context, *revilspb.RegistrySubKeyListReq) (*revilspb.RegistrySubKeyList, error)
	RegistryListValues(context.Context, *revilspb.RegistryListValuesReq) (*revilspb.RegistryValuesList, error)
	RunSSHCommand(context.Context, *revilspb.SSHCommandReq) (*revilspb.SSHCommand, error)
	HijackDLL(context.Context, *clientpb.DllHijackReq) (*clientpb.DllHijack, error)
	GetPrivs(context.Context, *revilspb.GetPrivsReq) (*revilspb.GetPrivs, error)
	StartRportFwdListener(context.Context, *revilspb.RportFwdStartListenerReq) (*revilspb.RportFwdListener, error)
	GetRportFwdListeners(context.Context, *revilspb.RportFwdListenersReq) (*revilspb.RportFwdListeners, error)
	StopRportFwdListener(context.Context, *revilspb.RportFwdStopListenerReq) (*revilspb.RportFwdListener, error)
	// Beacon only commands
	OpenSession(context.Context, *revilspb.OpenSession) (*revilspb.OpenSession, error)
	CloseSession(context.Context, *revilspb.CloseSession) (*commonpb.Empty, error)
	// Extensions
	RegisterExtension(context.Context, *revilspb.RegisterExtensionReq) (*revilspb.RegisterExtension, error)
	CallExtension(context.Context, *revilspb.CallExtensionReq) (*revilspb.CallExtension, error)
	ListExtensions(context.Context, *revilspb.ListExtensionsReq) (*revilspb.ListExtensions, error)
	// *** Wireguard Specific ***
	WGStartPortForward(context.Context, *revilspb.WGPortForwardStartReq) (*revilspb.WGPortForward, error)
	WGStopPortForward(context.Context, *revilspb.WGPortForwardStopReq) (*revilspb.WGPortForward, error)
	WGStartSocks(context.Context, *revilspb.WGSocksStartReq) (*revilspb.WGSocks, error)
	WGStopSocks(context.Context, *revilspb.WGSocksStopReq) (*revilspb.WGSocks, error)
	WGListForwarders(context.Context, *revilspb.WGTCPForwardersReq) (*revilspb.WGTCPForwarders, error)
	WGListSocksServers(context.Context, *revilspb.WGSocksServersReq) (*revilspb.WGSocksServers, error)
	// *** Realtime Commands ***
	Shell(context.Context, *revilspb.ShellReq) (*revilspb.Shell, error)
	Portfwd(context.Context, *revilspb.PortfwdReq) (*revilspb.Portfwd, error)
	// *** Socks5 ***
	CreateSocks(context.Context, *revilspb.Socks) (*revilspb.Socks, error)
	CloseSocks(context.Context, *revilspb.Socks) (*commonpb.Empty, error)
	SocksProxy(RevilsRPC_SocksProxyServer) error
	// *** Tunnels ***
	CreateTunnel(context.Context, *revilspb.Tunnel) (*revilspb.Tunnel, error)
	CloseTunnel(context.Context, *revilspb.Tunnel) (*commonpb.Empty, error)
	TunnelData(RevilsRPC_TunnelDataServer) error
	// *** Events ***
	Events(*commonpb.Empty, RevilsRPC_EventsServer) error
	mustEmbedUnimplementedRevilsRPCServer()
}

// UnimplementedRevilsRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRevilsRPCServer struct {
}

func (UnimplementedRevilsRPCServer) GetVersion(context.Context, *commonpb.Empty) (*clientpb.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedRevilsRPCServer) GetOperators(context.Context, *commonpb.Empty) (*clientpb.Operators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperators not implemented")
}
func (UnimplementedRevilsRPCServer) Kill(context.Context, *revilspb.KillReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedRevilsRPCServer) Reconfigure(context.Context, *revilspb.ReconfigureReq) (*revilspb.Reconfigure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconfigure not implemented")
}
func (UnimplementedRevilsRPCServer) Rename(context.Context, *clientpb.RenameReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedRevilsRPCServer) GetSessions(context.Context, *commonpb.Empty) (*clientpb.Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedRevilsRPCServer) GetBeacons(context.Context, *commonpb.Empty) (*clientpb.Beacons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacons not implemented")
}
func (UnimplementedRevilsRPCServer) GetBeacon(context.Context, *clientpb.Beacon) (*clientpb.Beacon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacon not implemented")
}
func (UnimplementedRevilsRPCServer) RmBeacon(context.Context, *clientpb.Beacon) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmBeacon not implemented")
}
func (UnimplementedRevilsRPCServer) GetBeaconTasks(context.Context, *clientpb.Beacon) (*clientpb.BeaconTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaconTasks not implemented")
}
func (UnimplementedRevilsRPCServer) GetBeaconTaskContent(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaconTaskContent not implemented")
}
func (UnimplementedRevilsRPCServer) CancelBeaconTask(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBeaconTask not implemented")
}
func (UnimplementedRevilsRPCServer) MonitorStart(context.Context, *commonpb.Empty) (*commonpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorStart not implemented")
}
func (UnimplementedRevilsRPCServer) MonitorStop(context.Context, *commonpb.Empty) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorStop not implemented")
}
func (UnimplementedRevilsRPCServer) GetJobs(context.Context, *commonpb.Empty) (*clientpb.Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedRevilsRPCServer) KillJob(context.Context, *clientpb.KillJobReq) (*clientpb.KillJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillJob not implemented")
}
func (UnimplementedRevilsRPCServer) StartMTLSListener(context.Context, *clientpb.MTLSListenerReq) (*clientpb.MTLSListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMTLSListener not implemented")
}
func (UnimplementedRevilsRPCServer) StartWGListener(context.Context, *clientpb.WGListenerReq) (*clientpb.WGListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWGListener not implemented")
}
func (UnimplementedRevilsRPCServer) StartDNSListener(context.Context, *clientpb.DNSListenerReq) (*clientpb.DNSListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDNSListener not implemented")
}
func (UnimplementedRevilsRPCServer) StartHTTPSListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPSListener not implemented")
}
func (UnimplementedRevilsRPCServer) StartHTTPListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPListener not implemented")
}
func (UnimplementedRevilsRPCServer) StartTCPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTCPStagerListener not implemented")
}
func (UnimplementedRevilsRPCServer) StartHTTPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPStagerListener not implemented")
}
func (UnimplementedRevilsRPCServer) LootAdd(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAdd not implemented")
}
func (UnimplementedRevilsRPCServer) LootRm(context.Context, *clientpb.Loot) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootRm not implemented")
}
func (UnimplementedRevilsRPCServer) LootUpdate(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootUpdate not implemented")
}
func (UnimplementedRevilsRPCServer) LootContent(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootContent not implemented")
}
func (UnimplementedRevilsRPCServer) LootAll(context.Context, *commonpb.Empty) (*clientpb.AllLoot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAll not implemented")
}
func (UnimplementedRevilsRPCServer) LootAllOf(context.Context, *clientpb.Loot) (*clientpb.AllLoot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAllOf not implemented")
}
func (UnimplementedRevilsRPCServer) Hosts(context.Context, *commonpb.Empty) (*clientpb.AllHosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hosts not implemented")
}
func (UnimplementedRevilsRPCServer) Host(context.Context, *clientpb.Host) (*clientpb.Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Host not implemented")
}
func (UnimplementedRevilsRPCServer) HostRm(context.Context, *clientpb.Host) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostRm not implemented")
}
func (UnimplementedRevilsRPCServer) HostIOCRm(context.Context, *clientpb.IOC) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostIOCRm not implemented")
}
func (UnimplementedRevilsRPCServer) Generate(context.Context, *clientpb.GenerateReq) (*clientpb.Generate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedRevilsRPCServer) GenerateExternal(context.Context, *clientpb.ExternalGenerateReq) (*clientpb.ExternalImplantConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExternal not implemented")
}
func (UnimplementedRevilsRPCServer) GenerateExternalSaveBuild(context.Context, *clientpb.ExternalImplantBinary) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExternalSaveBuild not implemented")
}
func (UnimplementedRevilsRPCServer) GenerateExternalGetImplantConfig(context.Context, *clientpb.ImplantConfig) (*clientpb.ExternalImplantConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExternalGetImplantConfig not implemented")
}
func (UnimplementedRevilsRPCServer) BuilderRegister(*clientpb.Builder, RevilsRPC_BuilderRegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method BuilderRegister not implemented")
}
func (UnimplementedRevilsRPCServer) BuilderTrigger(context.Context, *clientpb.Event) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderTrigger not implemented")
}
func (UnimplementedRevilsRPCServer) Builders(context.Context, *commonpb.Empty) (*clientpb.Builders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Builders not implemented")
}
func (UnimplementedRevilsRPCServer) Regenerate(context.Context, *clientpb.RegenerateReq) (*clientpb.Generate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regenerate not implemented")
}
func (UnimplementedRevilsRPCServer) ImplantBuilds(context.Context, *commonpb.Empty) (*clientpb.ImplantBuilds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantBuilds not implemented")
}
func (UnimplementedRevilsRPCServer) DeleteImplantBuild(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImplantBuild not implemented")
}
func (UnimplementedRevilsRPCServer) Canaries(context.Context, *commonpb.Empty) (*clientpb.Canaries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Canaries not implemented")
}
func (UnimplementedRevilsRPCServer) GenerateWGClientConfig(context.Context, *commonpb.Empty) (*clientpb.WGClientConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWGClientConfig not implemented")
}
func (UnimplementedRevilsRPCServer) GenerateUniqueIP(context.Context, *commonpb.Empty) (*clientpb.UniqueWGIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUniqueIP not implemented")
}
func (UnimplementedRevilsRPCServer) ImplantProfiles(context.Context, *commonpb.Empty) (*clientpb.ImplantProfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantProfiles not implemented")
}
func (UnimplementedRevilsRPCServer) DeleteImplantProfile(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImplantProfile not implemented")
}
func (UnimplementedRevilsRPCServer) SaveImplantProfile(context.Context, *clientpb.ImplantProfile) (*clientpb.ImplantProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveImplantProfile not implemented")
}
func (UnimplementedRevilsRPCServer) MsfStage(context.Context, *clientpb.MsfStagerReq) (*clientpb.MsfStager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsfStage not implemented")
}
func (UnimplementedRevilsRPCServer) ShellcodeRDI(context.Context, *clientpb.ShellcodeRDIReq) (*clientpb.ShellcodeRDI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeRDI not implemented")
}
func (UnimplementedRevilsRPCServer) GetCompiler(context.Context, *commonpb.Empty) (*clientpb.Compiler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompiler not implemented")
}
func (UnimplementedRevilsRPCServer) ShellcodeEncoder(context.Context, *clientpb.ShellcodeEncodeReq) (*clientpb.ShellcodeEncode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeEncoder not implemented")
}
func (UnimplementedRevilsRPCServer) ShellcodeEncoderMap(context.Context, *commonpb.Empty) (*clientpb.ShellcodeEncoderMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeEncoderMap not implemented")
}
func (UnimplementedRevilsRPCServer) Websites(context.Context, *commonpb.Empty) (*clientpb.Websites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Websites not implemented")
}
func (UnimplementedRevilsRPCServer) Website(context.Context, *clientpb.Website) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Website not implemented")
}
func (UnimplementedRevilsRPCServer) WebsiteRemove(context.Context, *clientpb.Website) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemove not implemented")
}
func (UnimplementedRevilsRPCServer) WebsiteAddContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteAddContent not implemented")
}
func (UnimplementedRevilsRPCServer) WebsiteUpdateContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteUpdateContent not implemented")
}
func (UnimplementedRevilsRPCServer) WebsiteRemoveContent(context.Context, *clientpb.WebsiteRemoveContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemoveContent not implemented")
}
func (UnimplementedRevilsRPCServer) Ping(context.Context, *revilspb.Ping) (*revilspb.Ping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRevilsRPCServer) Ps(context.Context, *revilspb.PsReq) (*revilspb.Ps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ps not implemented")
}
func (UnimplementedRevilsRPCServer) Terminate(context.Context, *revilspb.TerminateReq) (*revilspb.Terminate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedRevilsRPCServer) Ifconfig(context.Context, *revilspb.IfconfigReq) (*revilspb.Ifconfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ifconfig not implemented")
}
func (UnimplementedRevilsRPCServer) Netstat(context.Context, *revilspb.NetstsatReq) (*revilspb.Netstat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Netstat not implemented")
}
func (UnimplementedRevilsRPCServer) Ls(context.Context, *revilspb.LsReq) (*revilspb.Ls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ls not implemented")
}
func (UnimplementedRevilsRPCServer) Cd(context.Context, *revilspb.CdReq) (*revilspb.Pwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cd not implemented")
}
func (UnimplementedRevilsRPCServer) Pwd(context.Context, *revilspb.PwdReq) (*revilspb.Pwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pwd not implemented")
}
func (UnimplementedRevilsRPCServer) Mv(context.Context, *revilspb.MvReq) (*revilspb.Mv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mv not implemented")
}
func (UnimplementedRevilsRPCServer) Rm(context.Context, *revilspb.RmReq) (*revilspb.Rm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rm not implemented")
}
func (UnimplementedRevilsRPCServer) Mkdir(context.Context, *revilspb.MkdirReq) (*revilspb.Mkdir, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedRevilsRPCServer) Download(context.Context, *revilspb.DownloadReq) (*revilspb.Download, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedRevilsRPCServer) Upload(context.Context, *revilspb.UploadReq) (*revilspb.Upload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedRevilsRPCServer) Chmod(context.Context, *revilspb.ChmodReq) (*revilspb.Chmod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chmod not implemented")
}
func (UnimplementedRevilsRPCServer) Chown(context.Context, *revilspb.ChownReq) (*revilspb.Chown, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chown not implemented")
}
func (UnimplementedRevilsRPCServer) Chtimes(context.Context, *revilspb.ChtimesReq) (*revilspb.Chtimes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chtimes not implemented")
}
func (UnimplementedRevilsRPCServer) MemfilesList(context.Context, *revilspb.MemfilesListReq) (*revilspb.Ls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemfilesList not implemented")
}
func (UnimplementedRevilsRPCServer) MemfilesAdd(context.Context, *revilspb.MemfilesAddReq) (*revilspb.MemfilesAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemfilesAdd not implemented")
}
func (UnimplementedRevilsRPCServer) MemfilesRm(context.Context, *revilspb.MemfilesRmReq) (*revilspb.MemfilesRm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemfilesRm not implemented")
}
func (UnimplementedRevilsRPCServer) ProcessDump(context.Context, *revilspb.ProcessDumpReq) (*revilspb.ProcessDump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDump not implemented")
}
func (UnimplementedRevilsRPCServer) RunAs(context.Context, *revilspb.RunAsReq) (*revilspb.RunAs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAs not implemented")
}
func (UnimplementedRevilsRPCServer) Impersonate(context.Context, *revilspb.ImpersonateReq) (*revilspb.Impersonate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Impersonate not implemented")
}
func (UnimplementedRevilsRPCServer) RevToSelf(context.Context, *revilspb.RevToSelfReq) (*revilspb.RevToSelf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevToSelf not implemented")
}
func (UnimplementedRevilsRPCServer) GetSystem(context.Context, *clientpb.GetSystemReq) (*revilspb.GetSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedRevilsRPCServer) Task(context.Context, *revilspb.TaskReq) (*revilspb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (UnimplementedRevilsRPCServer) Msf(context.Context, *clientpb.MSFReq) (*revilspb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Msf not implemented")
}
func (UnimplementedRevilsRPCServer) MsfRemote(context.Context, *clientpb.MSFRemoteReq) (*revilspb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsfRemote not implemented")
}
func (UnimplementedRevilsRPCServer) ExecuteAssembly(context.Context, *revilspb.ExecuteAssemblyReq) (*revilspb.ExecuteAssembly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAssembly not implemented")
}
func (UnimplementedRevilsRPCServer) Migrate(context.Context, *clientpb.MigrateReq) (*revilspb.Migrate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (UnimplementedRevilsRPCServer) Execute(context.Context, *revilspb.ExecuteReq) (*revilspb.Execute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedRevilsRPCServer) ExecuteWindows(context.Context, *revilspb.ExecuteWindowsReq) (*revilspb.Execute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWindows not implemented")
}
func (UnimplementedRevilsRPCServer) Sideload(context.Context, *revilspb.SideloadReq) (*revilspb.Sideload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sideload not implemented")
}
func (UnimplementedRevilsRPCServer) SpawnDll(context.Context, *revilspb.InvokeSpawnDlllReq) (*revilspb.SpawnDll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnDll not implemented")
}
func (UnimplementedRevilsRPCServer) Screenshot(context.Context, *revilspb.ScreenshotReq) (*revilspb.Screenshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Screenshot not implemented")
}
func (UnimplementedRevilsRPCServer) CurrentTokenOwner(context.Context, *revilspb.CurrentTokenOwnerReq) (*revilspb.CurrentTokenOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTokenOwner not implemented")
}
func (UnimplementedRevilsRPCServer) PivotStartListener(context.Context, *revilspb.PivotStartListenerReq) (*revilspb.PivotListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotStartListener not implemented")
}
func (UnimplementedRevilsRPCServer) PivotStopListener(context.Context, *revilspb.PivotStopListenerReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotStopListener not implemented")
}
func (UnimplementedRevilsRPCServer) PivotSessionListeners(context.Context, *revilspb.PivotListenersReq) (*revilspb.PivotListeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotSessionListeners not implemented")
}
func (UnimplementedRevilsRPCServer) PivotGraph(context.Context, *commonpb.Empty) (*clientpb.PivotGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotGraph not implemented")
}
func (UnimplementedRevilsRPCServer) StartService(context.Context, *revilspb.StartServiceReq) (*revilspb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (UnimplementedRevilsRPCServer) StopService(context.Context, *revilspb.StopServiceReq) (*revilspb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopService not implemented")
}
func (UnimplementedRevilsRPCServer) RemoveService(context.Context, *revilspb.RemoveServiceReq) (*revilspb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (UnimplementedRevilsRPCServer) MakeToken(context.Context, *revilspb.MakeTokenReq) (*revilspb.MakeToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeToken not implemented")
}
func (UnimplementedRevilsRPCServer) GetEnv(context.Context, *revilspb.EnvReq) (*revilspb.EnvInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedRevilsRPCServer) SetEnv(context.Context, *revilspb.SetEnvReq) (*revilspb.SetEnv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnv not implemented")
}
func (UnimplementedRevilsRPCServer) UnsetEnv(context.Context, *revilspb.UnsetEnvReq) (*revilspb.UnsetEnv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetEnv not implemented")
}
func (UnimplementedRevilsRPCServer) Backdoor(context.Context, *revilspb.BackdoorReq) (*revilspb.Backdoor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backdoor not implemented")
}
func (UnimplementedRevilsRPCServer) RegistryRead(context.Context, *revilspb.RegistryReedReq) (*revilspb.RegistryRead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryRead not implemented")
}
func (UnimplementedRevilsRPCServer) RegistryWrite(context.Context, *revilspb.RegistryWriteReq) (*revilspb.RegistryWrite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryWrite not implemented")
}
func (UnimplementedRevilsRPCServer) RegistryCreateKey(context.Context, *revilspb.RegistryCreateKeyReq) (*revilspb.RegistryCreateKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryCreateKey not implemented")
}
func (UnimplementedRevilsRPCServer) RegistryDeleteKey(context.Context, *revilspb.RegistryDeleteKeyReq) (*revilspb.RegistryDeleteKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryDeleteKey not implemented")
}
func (UnimplementedRevilsRPCServer) RegistryListSubKeys(context.Context, *revilspb.RegistrySubKeyListReq) (*revilspb.RegistrySubKeyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryListSubKeys not implemented")
}
func (UnimplementedRevilsRPCServer) RegistryListValues(context.Context, *revilspb.RegistryListValuesReq) (*revilspb.RegistryValuesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryListValues not implemented")
}
func (UnimplementedRevilsRPCServer) RunSSHCommand(context.Context, *revilspb.SSHCommandReq) (*revilspb.SSHCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSSHCommand not implemented")
}
func (UnimplementedRevilsRPCServer) HijackDLL(context.Context, *clientpb.DllHijackReq) (*clientpb.DllHijack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HijackDLL not implemented")
}
func (UnimplementedRevilsRPCServer) GetPrivs(context.Context, *revilspb.GetPrivsReq) (*revilspb.GetPrivs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivs not implemented")
}
func (UnimplementedRevilsRPCServer) StartRportFwdListener(context.Context, *revilspb.RportFwdStartListenerReq) (*revilspb.RportFwdListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRportFwdListener not implemented")
}
func (UnimplementedRevilsRPCServer) GetRportFwdListeners(context.Context, *revilspb.RportFwdListenersReq) (*revilspb.RportFwdListeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRportFwdListeners not implemented")
}
func (UnimplementedRevilsRPCServer) StopRportFwdListener(context.Context, *revilspb.RportFwdStopListenerReq) (*revilspb.RportFwdListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRportFwdListener not implemented")
}
func (UnimplementedRevilsRPCServer) OpenSession(context.Context, *revilspb.OpenSession) (*revilspb.OpenSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSession not implemented")
}
func (UnimplementedRevilsRPCServer) CloseSession(context.Context, *revilspb.CloseSession) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedRevilsRPCServer) RegisterExtension(context.Context, *revilspb.RegisterExtensionReq) (*revilspb.RegisterExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExtension not implemented")
}
func (UnimplementedRevilsRPCServer) CallExtension(context.Context, *revilspb.CallExtensionReq) (*revilspb.CallExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallExtension not implemented")
}
func (UnimplementedRevilsRPCServer) ListExtensions(context.Context, *revilspb.ListExtensionsReq) (*revilspb.ListExtensions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtensions not implemented")
}
func (UnimplementedRevilsRPCServer) WGStartPortForward(context.Context, *revilspb.WGPortForwardStartReq) (*revilspb.WGPortForward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStartPortForward not implemented")
}
func (UnimplementedRevilsRPCServer) WGStopPortForward(context.Context, *revilspb.WGPortForwardStopReq) (*revilspb.WGPortForward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStopPortForward not implemented")
}
func (UnimplementedRevilsRPCServer) WGStartSocks(context.Context, *revilspb.WGSocksStartReq) (*revilspb.WGSocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStartSocks not implemented")
}
func (UnimplementedRevilsRPCServer) WGStopSocks(context.Context, *revilspb.WGSocksStopReq) (*revilspb.WGSocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStopSocks not implemented")
}
func (UnimplementedRevilsRPCServer) WGListForwarders(context.Context, *revilspb.WGTCPForwardersReq) (*revilspb.WGTCPForwarders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGListForwarders not implemented")
}
func (UnimplementedRevilsRPCServer) WGListSocksServers(context.Context, *revilspb.WGSocksServersReq) (*revilspb.WGSocksServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGListSocksServers not implemented")
}
func (UnimplementedRevilsRPCServer) Shell(context.Context, *revilspb.ShellReq) (*revilspb.Shell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedRevilsRPCServer) Portfwd(context.Context, *revilspb.PortfwdReq) (*revilspb.Portfwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portfwd not implemented")
}
func (UnimplementedRevilsRPCServer) CreateSocks(context.Context, *revilspb.Socks) (*revilspb.Socks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSocks not implemented")
}
func (UnimplementedRevilsRPCServer) CloseSocks(context.Context, *revilspb.Socks) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSocks not implemented")
}
func (UnimplementedRevilsRPCServer) SocksProxy(RevilsRPC_SocksProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method SocksProxy not implemented")
}
func (UnimplementedRevilsRPCServer) CreateTunnel(context.Context, *revilspb.Tunnel) (*revilspb.Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedRevilsRPCServer) CloseTunnel(context.Context, *revilspb.Tunnel) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTunnel not implemented")
}
func (UnimplementedRevilsRPCServer) TunnelData(RevilsRPC_TunnelDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TunnelData not implemented")
}
func (UnimplementedRevilsRPCServer) Events(*commonpb.Empty, RevilsRPC_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedRevilsRPCServer) mustEmbedUnimplementedRevilsRPCServer() {}

// UnsafeRevilsRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevilsRPCServer will
// result in compilation errors.
type UnsafeRevilsRPCServer interface {
	mustEmbedUnimplementedRevilsRPCServer()
}

func RegisterRevilsRPCServer(s grpc.ServiceRegistrar, srv RevilsRPCServer) {
	s.RegisterService(&RevilsRPC_ServiceDesc, srv)
}

func _RevilsRPC_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetVersion(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetOperators(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.KillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Kill(ctx, req.(*revilspb.KillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Reconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ReconfigureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Reconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Reconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Reconfigure(ctx, req.(*revilspb.ReconfigureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.RenameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Rename(ctx, req.(*clientpb.RenameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetSessions(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetBeacons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetBeacons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetBeacons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetBeacons(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetBeacon(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RmBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RmBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RmBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RmBeacon(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetBeaconTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetBeaconTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetBeaconTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetBeaconTasks(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetBeaconTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BeaconTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetBeaconTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetBeaconTaskContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetBeaconTaskContent(ctx, req.(*clientpb.BeaconTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_CancelBeaconTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BeaconTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).CancelBeaconTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/CancelBeaconTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).CancelBeaconTask(ctx, req.(*clientpb.BeaconTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_MonitorStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).MonitorStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/MonitorStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).MonitorStart(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_MonitorStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).MonitorStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/MonitorStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).MonitorStop(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetJobs(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.KillJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/KillJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).KillJob(ctx, req.(*clientpb.KillJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartMTLSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MTLSListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartMTLSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartMTLSListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartMTLSListener(ctx, req.(*clientpb.MTLSListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartWGListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WGListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartWGListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartWGListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartWGListener(ctx, req.(*clientpb.WGListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartDNSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DNSListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartDNSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartDNSListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartDNSListener(ctx, req.(*clientpb.DNSListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartHTTPSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.HTTPListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartHTTPSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartHTTPSListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartHTTPSListener(ctx, req.(*clientpb.HTTPListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartHTTPListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.HTTPListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartHTTPListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartHTTPListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartHTTPListener(ctx, req.(*clientpb.HTTPListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartTCPStagerListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.StagerListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartTCPStagerListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartTCPStagerListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartTCPStagerListener(ctx, req.(*clientpb.StagerListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartHTTPStagerListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.StagerListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartHTTPStagerListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartHTTPStagerListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartHTTPStagerListener(ctx, req.(*clientpb.StagerListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_LootAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).LootAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/LootAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).LootAdd(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_LootRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).LootRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/LootRm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).LootRm(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_LootUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).LootUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/LootUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).LootUpdate(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_LootContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).LootContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/LootContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).LootContent(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_LootAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).LootAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/LootAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).LootAll(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_LootAllOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).LootAllOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/LootAllOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).LootAllOf(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Hosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Hosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Hosts(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Host_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Host(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Host",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Host(ctx, req.(*clientpb.Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_HostRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).HostRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/HostRm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).HostRm(ctx, req.(*clientpb.Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_HostIOCRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.IOC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).HostIOCRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/HostIOCRm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).HostIOCRm(ctx, req.(*clientpb.IOC))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.GenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Generate(ctx, req.(*clientpb.GenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GenerateExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ExternalGenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GenerateExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GenerateExternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GenerateExternal(ctx, req.(*clientpb.ExternalGenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GenerateExternalSaveBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ExternalImplantBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GenerateExternalSaveBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GenerateExternalSaveBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GenerateExternalSaveBuild(ctx, req.(*clientpb.ExternalImplantBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GenerateExternalGetImplantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ImplantConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GenerateExternalGetImplantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GenerateExternalGetImplantConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GenerateExternalGetImplantConfig(ctx, req.(*clientpb.ImplantConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_BuilderRegister_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.Builder)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevilsRPCServer).BuilderRegister(m, &revilsRPCBuilderRegisterServer{stream})
}

type RevilsRPC_BuilderRegisterServer interface {
	Send(*clientpb.Event) error
	grpc.ServerStream
}

type revilsRPCBuilderRegisterServer struct {
	grpc.ServerStream
}

func (x *revilsRPCBuilderRegisterServer) Send(m *clientpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _RevilsRPC_BuilderTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).BuilderTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/BuilderTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).BuilderTrigger(ctx, req.(*clientpb.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Builders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Builders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Builders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Builders(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Regenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.RegenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Regenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Regenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Regenerate(ctx, req.(*clientpb.RegenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ImplantBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ImplantBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ImplantBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ImplantBuilds(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_DeleteImplantBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).DeleteImplantBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/DeleteImplantBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).DeleteImplantBuild(ctx, req.(*clientpb.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Canaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Canaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Canaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Canaries(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GenerateWGClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GenerateWGClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GenerateWGClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GenerateWGClientConfig(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GenerateUniqueIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GenerateUniqueIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GenerateUniqueIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GenerateUniqueIP(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ImplantProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ImplantProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ImplantProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ImplantProfiles(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_DeleteImplantProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).DeleteImplantProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/DeleteImplantProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).DeleteImplantProfile(ctx, req.(*clientpb.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_SaveImplantProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ImplantProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).SaveImplantProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/SaveImplantProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).SaveImplantProfile(ctx, req.(*clientpb.ImplantProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_MsfStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MsfStagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).MsfStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/MsfStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).MsfStage(ctx, req.(*clientpb.MsfStagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ShellcodeRDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ShellcodeRDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ShellcodeRDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ShellcodeRDI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ShellcodeRDI(ctx, req.(*clientpb.ShellcodeRDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetCompiler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetCompiler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetCompiler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetCompiler(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ShellcodeEncoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ShellcodeEncodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ShellcodeEncoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ShellcodeEncoder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ShellcodeEncoder(ctx, req.(*clientpb.ShellcodeEncodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ShellcodeEncoderMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ShellcodeEncoderMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ShellcodeEncoderMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ShellcodeEncoderMap(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Websites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Websites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Websites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Websites(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Website_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Website(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Website",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Website(ctx, req.(*clientpb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WebsiteRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WebsiteRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WebsiteRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WebsiteRemove(ctx, req.(*clientpb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WebsiteAddContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WebsiteAddContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WebsiteAddContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WebsiteAddContent(ctx, req.(*clientpb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WebsiteUpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WebsiteUpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WebsiteUpdateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WebsiteUpdateContent(ctx, req.(*clientpb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WebsiteRemoveContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteRemoveContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WebsiteRemoveContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WebsiteRemoveContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WebsiteRemoveContent(ctx, req.(*clientpb.WebsiteRemoveContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Ping(ctx, req.(*revilspb.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Ps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.PsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Ps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Ps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Ps(ctx, req.(*revilspb.PsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.TerminateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Terminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Terminate(ctx, req.(*revilspb.TerminateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Ifconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.IfconfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Ifconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Ifconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Ifconfig(ctx, req.(*revilspb.IfconfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Netstat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.NetstsatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Netstat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Netstat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Netstat(ctx, req.(*revilspb.NetstsatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Ls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.LsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Ls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Ls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Ls(ctx, req.(*revilspb.LsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Cd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.CdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Cd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Cd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Cd(ctx, req.(*revilspb.CdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Pwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.PwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Pwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Pwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Pwd(ctx, req.(*revilspb.PwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Mv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.MvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Mv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Mv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Mv(ctx, req.(*revilspb.MvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Rm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Rm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Rm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Rm(ctx, req.(*revilspb.RmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.MkdirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Mkdir(ctx, req.(*revilspb.MkdirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.DownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Download(ctx, req.(*revilspb.DownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Upload(ctx, req.(*revilspb.UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ChmodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Chmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Chmod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Chmod(ctx, req.(*revilspb.ChmodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ChownReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Chown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Chown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Chown(ctx, req.(*revilspb.ChownReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Chtimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ChtimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Chtimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Chtimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Chtimes(ctx, req.(*revilspb.ChtimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_MemfilesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.MemfilesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).MemfilesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/MemfilesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).MemfilesList(ctx, req.(*revilspb.MemfilesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_MemfilesAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.MemfilesAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).MemfilesAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/MemfilesAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).MemfilesAdd(ctx, req.(*revilspb.MemfilesAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_MemfilesRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.MemfilesRmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).MemfilesRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/MemfilesRm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).MemfilesRm(ctx, req.(*revilspb.MemfilesRmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ProcessDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ProcessDumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ProcessDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ProcessDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ProcessDump(ctx, req.(*revilspb.ProcessDumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RunAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RunAsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RunAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RunAs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RunAs(ctx, req.(*revilspb.RunAsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Impersonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ImpersonateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Impersonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Impersonate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Impersonate(ctx, req.(*revilspb.ImpersonateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RevToSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RevToSelfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RevToSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RevToSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RevToSelf(ctx, req.(*revilspb.RevToSelfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.GetSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetSystem(ctx, req.(*clientpb.GetSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.TaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Task(ctx, req.(*revilspb.TaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Msf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MSFReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Msf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Msf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Msf(ctx, req.(*clientpb.MSFReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_MsfRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MSFRemoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).MsfRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/MsfRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).MsfRemote(ctx, req.(*clientpb.MSFRemoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ExecuteAssembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ExecuteAssemblyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ExecuteAssembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ExecuteAssembly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ExecuteAssembly(ctx, req.(*revilspb.ExecuteAssemblyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MigrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Migrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Migrate(ctx, req.(*clientpb.MigrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ExecuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Execute(ctx, req.(*revilspb.ExecuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ExecuteWindows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ExecuteWindowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ExecuteWindows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ExecuteWindows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ExecuteWindows(ctx, req.(*revilspb.ExecuteWindowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Sideload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.SideloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Sideload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Sideload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Sideload(ctx, req.(*revilspb.SideloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_SpawnDll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.InvokeSpawnDlllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).SpawnDll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/SpawnDll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).SpawnDll(ctx, req.(*revilspb.InvokeSpawnDlllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Screenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ScreenshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Screenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Screenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Screenshot(ctx, req.(*revilspb.ScreenshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_CurrentTokenOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.CurrentTokenOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).CurrentTokenOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/CurrentTokenOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).CurrentTokenOwner(ctx, req.(*revilspb.CurrentTokenOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_PivotStartListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.PivotStartListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).PivotStartListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/PivotStartListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).PivotStartListener(ctx, req.(*revilspb.PivotStartListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_PivotStopListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.PivotStopListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).PivotStopListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/PivotStopListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).PivotStopListener(ctx, req.(*revilspb.PivotStopListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_PivotSessionListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.PivotListenersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).PivotSessionListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/PivotSessionListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).PivotSessionListeners(ctx, req.(*revilspb.PivotListenersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_PivotGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).PivotGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/PivotGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).PivotGraph(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.StartServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartService(ctx, req.(*revilspb.StartServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.StopServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StopService(ctx, req.(*revilspb.StopServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RemoveServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RemoveService(ctx, req.(*revilspb.RemoveServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_MakeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.MakeTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).MakeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/MakeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).MakeToken(ctx, req.(*revilspb.MakeTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.EnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetEnv(ctx, req.(*revilspb.EnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_SetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.SetEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).SetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/SetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).SetEnv(ctx, req.(*revilspb.SetEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_UnsetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.UnsetEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).UnsetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/UnsetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).UnsetEnv(ctx, req.(*revilspb.UnsetEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Backdoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.BackdoorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Backdoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Backdoor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Backdoor(ctx, req.(*revilspb.BackdoorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RegistryRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RegistryReedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RegistryRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RegistryRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RegistryRead(ctx, req.(*revilspb.RegistryReedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RegistryWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RegistryWriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RegistryWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RegistryWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RegistryWrite(ctx, req.(*revilspb.RegistryWriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RegistryCreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RegistryCreateKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RegistryCreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RegistryCreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RegistryCreateKey(ctx, req.(*revilspb.RegistryCreateKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RegistryDeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RegistryDeleteKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RegistryDeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RegistryDeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RegistryDeleteKey(ctx, req.(*revilspb.RegistryDeleteKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RegistryListSubKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RegistrySubKeyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RegistryListSubKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RegistryListSubKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RegistryListSubKeys(ctx, req.(*revilspb.RegistrySubKeyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RegistryListValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RegistryListValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RegistryListValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RegistryListValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RegistryListValues(ctx, req.(*revilspb.RegistryListValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RunSSHCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.SSHCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RunSSHCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RunSSHCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RunSSHCommand(ctx, req.(*revilspb.SSHCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_HijackDLL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DllHijackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).HijackDLL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/HijackDLL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).HijackDLL(ctx, req.(*clientpb.DllHijackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetPrivs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.GetPrivsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetPrivs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetPrivs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetPrivs(ctx, req.(*revilspb.GetPrivsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StartRportFwdListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RportFwdStartListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StartRportFwdListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StartRportFwdListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StartRportFwdListener(ctx, req.(*revilspb.RportFwdStartListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_GetRportFwdListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RportFwdListenersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).GetRportFwdListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/GetRportFwdListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).GetRportFwdListeners(ctx, req.(*revilspb.RportFwdListenersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_StopRportFwdListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RportFwdStopListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).StopRportFwdListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/StopRportFwdListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).StopRportFwdListener(ctx, req.(*revilspb.RportFwdStopListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.OpenSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).OpenSession(ctx, req.(*revilspb.OpenSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.CloseSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).CloseSession(ctx, req.(*revilspb.CloseSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_RegisterExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.RegisterExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).RegisterExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/RegisterExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).RegisterExtension(ctx, req.(*revilspb.RegisterExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_CallExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.CallExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).CallExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/CallExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).CallExtension(ctx, req.(*revilspb.CallExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_ListExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ListExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).ListExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/ListExtensions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).ListExtensions(ctx, req.(*revilspb.ListExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WGStartPortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.WGPortForwardStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WGStartPortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WGStartPortForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WGStartPortForward(ctx, req.(*revilspb.WGPortForwardStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WGStopPortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.WGPortForwardStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WGStopPortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WGStopPortForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WGStopPortForward(ctx, req.(*revilspb.WGPortForwardStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WGStartSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.WGSocksStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WGStartSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WGStartSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WGStartSocks(ctx, req.(*revilspb.WGSocksStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WGStopSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.WGSocksStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WGStopSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WGStopSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WGStopSocks(ctx, req.(*revilspb.WGSocksStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WGListForwarders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.WGTCPForwardersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WGListForwarders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WGListForwarders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WGListForwarders(ctx, req.(*revilspb.WGTCPForwardersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_WGListSocksServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.WGSocksServersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).WGListSocksServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/WGListSocksServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).WGListSocksServers(ctx, req.(*revilspb.WGSocksServersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Shell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.ShellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Shell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Shell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Shell(ctx, req.(*revilspb.ShellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_Portfwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.PortfwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).Portfwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/Portfwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).Portfwd(ctx, req.(*revilspb.PortfwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_CreateSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.Socks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).CreateSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/CreateSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).CreateSocks(ctx, req.(*revilspb.Socks))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_CloseSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.Socks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).CloseSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/CloseSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).CloseSocks(ctx, req.(*revilspb.Socks))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_SocksProxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RevilsRPCServer).SocksProxy(&revilsRPCSocksProxyServer{stream})
}

type RevilsRPC_SocksProxyServer interface {
	Send(*revilspb.SocksData) error
	Recv() (*revilspb.SocksData, error)
	grpc.ServerStream
}

type revilsRPCSocksProxyServer struct {
	grpc.ServerStream
}

func (x *revilsRPCSocksProxyServer) Send(m *revilspb.SocksData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *revilsRPCSocksProxyServer) Recv() (*revilspb.SocksData, error) {
	m := new(revilspb.SocksData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RevilsRPC_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.Tunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).CreateTunnel(ctx, req.(*revilspb.Tunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_CloseTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(revilspb.Tunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevilsRPCServer).CloseTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.RevilsRPC/CloseTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevilsRPCServer).CloseTunnel(ctx, req.(*revilspb.Tunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevilsRPC_TunnelData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RevilsRPCServer).TunnelData(&revilsRPCTunnelDataServer{stream})
}

type RevilsRPC_TunnelDataServer interface {
	Send(*revilspb.TunnelData) error
	Recv() (*revilspb.TunnelData, error)
	grpc.ServerStream
}

type revilsRPCTunnelDataServer struct {
	grpc.ServerStream
}

func (x *revilsRPCTunnelDataServer) Send(m *revilspb.TunnelData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *revilsRPCTunnelDataServer) Recv() (*revilspb.TunnelData, error) {
	m := new(revilspb.TunnelData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RevilsRPC_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(commonpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevilsRPCServer).Events(m, &revilsRPCEventsServer{stream})
}

type RevilsRPC_EventsServer interface {
	Send(*clientpb.Event) error
	grpc.ServerStream
}

type revilsRPCEventsServer struct {
	grpc.ServerStream
}

func (x *revilsRPCEventsServer) Send(m *clientpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

// RevilsRPC_ServiceDesc is the grpc.ServiceDesc for RevilsRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RevilsRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.RevilsRPC",
	HandlerType: (*RevilsRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _RevilsRPC_GetVersion_Handler,
		},
		{
			MethodName: "GetOperators",
			Handler:    _RevilsRPC_GetOperators_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _RevilsRPC_Kill_Handler,
		},
		{
			MethodName: "Reconfigure",
			Handler:    _RevilsRPC_Reconfigure_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _RevilsRPC_Rename_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _RevilsRPC_GetSessions_Handler,
		},
		{
			MethodName: "GetBeacons",
			Handler:    _RevilsRPC_GetBeacons_Handler,
		},
		{
			MethodName: "GetBeacon",
			Handler:    _RevilsRPC_GetBeacon_Handler,
		},
		{
			MethodName: "RmBeacon",
			Handler:    _RevilsRPC_RmBeacon_Handler,
		},
		{
			MethodName: "GetBeaconTasks",
			Handler:    _RevilsRPC_GetBeaconTasks_Handler,
		},
		{
			MethodName: "GetBeaconTaskContent",
			Handler:    _RevilsRPC_GetBeaconTaskContent_Handler,
		},
		{
			MethodName: "CancelBeaconTask",
			Handler:    _RevilsRPC_CancelBeaconTask_Handler,
		},
		{
			MethodName: "MonitorStart",
			Handler:    _RevilsRPC_MonitorStart_Handler,
		},
		{
			MethodName: "MonitorStop",
			Handler:    _RevilsRPC_MonitorStop_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _RevilsRPC_GetJobs_Handler,
		},
		{
			MethodName: "KillJob",
			Handler:    _RevilsRPC_KillJob_Handler,
		},
		{
			MethodName: "StartMTLSListener",
			Handler:    _RevilsRPC_StartMTLSListener_Handler,
		},
		{
			MethodName: "StartWGListener",
			Handler:    _RevilsRPC_StartWGListener_Handler,
		},
		{
			MethodName: "StartDNSListener",
			Handler:    _RevilsRPC_StartDNSListener_Handler,
		},
		{
			MethodName: "StartHTTPSListener",
			Handler:    _RevilsRPC_StartHTTPSListener_Handler,
		},
		{
			MethodName: "StartHTTPListener",
			Handler:    _RevilsRPC_StartHTTPListener_Handler,
		},
		{
			MethodName: "StartTCPStagerListener",
			Handler:    _RevilsRPC_StartTCPStagerListener_Handler,
		},
		{
			MethodName: "StartHTTPStagerListener",
			Handler:    _RevilsRPC_StartHTTPStagerListener_Handler,
		},
		{
			MethodName: "LootAdd",
			Handler:    _RevilsRPC_LootAdd_Handler,
		},
		{
			MethodName: "LootRm",
			Handler:    _RevilsRPC_LootRm_Handler,
		},
		{
			MethodName: "LootUpdate",
			Handler:    _RevilsRPC_LootUpdate_Handler,
		},
		{
			MethodName: "LootContent",
			Handler:    _RevilsRPC_LootContent_Handler,
		},
		{
			MethodName: "LootAll",
			Handler:    _RevilsRPC_LootAll_Handler,
		},
		{
			MethodName: "LootAllOf",
			Handler:    _RevilsRPC_LootAllOf_Handler,
		},
		{
			MethodName: "Hosts",
			Handler:    _RevilsRPC_Hosts_Handler,
		},
		{
			MethodName: "Host",
			Handler:    _RevilsRPC_Host_Handler,
		},
		{
			MethodName: "HostRm",
			Handler:    _RevilsRPC_HostRm_Handler,
		},
		{
			MethodName: "HostIOCRm",
			Handler:    _RevilsRPC_HostIOCRm_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _RevilsRPC_Generate_Handler,
		},
		{
			MethodName: "GenerateExternal",
			Handler:    _RevilsRPC_GenerateExternal_Handler,
		},
		{
			MethodName: "GenerateExternalSaveBuild",
			Handler:    _RevilsRPC_GenerateExternalSaveBuild_Handler,
		},
		{
			MethodName: "GenerateExternalGetImplantConfig",
			Handler:    _RevilsRPC_GenerateExternalGetImplantConfig_Handler,
		},
		{
			MethodName: "BuilderTrigger",
			Handler:    _RevilsRPC_BuilderTrigger_Handler,
		},
		{
			MethodName: "Builders",
			Handler:    _RevilsRPC_Builders_Handler,
		},
		{
			MethodName: "Regenerate",
			Handler:    _RevilsRPC_Regenerate_Handler,
		},
		{
			MethodName: "ImplantBuilds",
			Handler:    _RevilsRPC_ImplantBuilds_Handler,
		},
		{
			MethodName: "DeleteImplantBuild",
			Handler:    _RevilsRPC_DeleteImplantBuild_Handler,
		},
		{
			MethodName: "Canaries",
			Handler:    _RevilsRPC_Canaries_Handler,
		},
		{
			MethodName: "GenerateWGClientConfig",
			Handler:    _RevilsRPC_GenerateWGClientConfig_Handler,
		},
		{
			MethodName: "GenerateUniqueIP",
			Handler:    _RevilsRPC_GenerateUniqueIP_Handler,
		},
		{
			MethodName: "ImplantProfiles",
			Handler:    _RevilsRPC_ImplantProfiles_Handler,
		},
		{
			MethodName: "DeleteImplantProfile",
			Handler:    _RevilsRPC_DeleteImplantProfile_Handler,
		},
		{
			MethodName: "SaveImplantProfile",
			Handler:    _RevilsRPC_SaveImplantProfile_Handler,
		},
		{
			MethodName: "MsfStage",
			Handler:    _RevilsRPC_MsfStage_Handler,
		},
		{
			MethodName: "ShellcodeRDI",
			Handler:    _RevilsRPC_ShellcodeRDI_Handler,
		},
		{
			MethodName: "GetCompiler",
			Handler:    _RevilsRPC_GetCompiler_Handler,
		},
		{
			MethodName: "ShellcodeEncoder",
			Handler:    _RevilsRPC_ShellcodeEncoder_Handler,
		},
		{
			MethodName: "ShellcodeEncoderMap",
			Handler:    _RevilsRPC_ShellcodeEncoderMap_Handler,
		},
		{
			MethodName: "Websites",
			Handler:    _RevilsRPC_Websites_Handler,
		},
		{
			MethodName: "Website",
			Handler:    _RevilsRPC_Website_Handler,
		},
		{
			MethodName: "WebsiteRemove",
			Handler:    _RevilsRPC_WebsiteRemove_Handler,
		},
		{
			MethodName: "WebsiteAddContent",
			Handler:    _RevilsRPC_WebsiteAddContent_Handler,
		},
		{
			MethodName: "WebsiteUpdateContent",
			Handler:    _RevilsRPC_WebsiteUpdateContent_Handler,
		},
		{
			MethodName: "WebsiteRemoveContent",
			Handler:    _RevilsRPC_WebsiteRemoveContent_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RevilsRPC_Ping_Handler,
		},
		{
			MethodName: "Ps",
			Handler:    _RevilsRPC_Ps_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _RevilsRPC_Terminate_Handler,
		},
		{
			MethodName: "Ifconfig",
			Handler:    _RevilsRPC_Ifconfig_Handler,
		},
		{
			MethodName: "Netstat",
			Handler:    _RevilsRPC_Netstat_Handler,
		},
		{
			MethodName: "Ls",
			Handler:    _RevilsRPC_Ls_Handler,
		},
		{
			MethodName: "Cd",
			Handler:    _RevilsRPC_Cd_Handler,
		},
		{
			MethodName: "Pwd",
			Handler:    _RevilsRPC_Pwd_Handler,
		},
		{
			MethodName: "Mv",
			Handler:    _RevilsRPC_Mv_Handler,
		},
		{
			MethodName: "Rm",
			Handler:    _RevilsRPC_Rm_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _RevilsRPC_Mkdir_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _RevilsRPC_Download_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _RevilsRPC_Upload_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _RevilsRPC_Chmod_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _RevilsRPC_Chown_Handler,
		},
		{
			MethodName: "Chtimes",
			Handler:    _RevilsRPC_Chtimes_Handler,
		},
		{
			MethodName: "MemfilesList",
			Handler:    _RevilsRPC_MemfilesList_Handler,
		},
		{
			MethodName: "MemfilesAdd",
			Handler:    _RevilsRPC_MemfilesAdd_Handler,
		},
		{
			MethodName: "MemfilesRm",
			Handler:    _RevilsRPC_MemfilesRm_Handler,
		},
		{
			MethodName: "ProcessDump",
			Handler:    _RevilsRPC_ProcessDump_Handler,
		},
		{
			MethodName: "RunAs",
			Handler:    _RevilsRPC_RunAs_Handler,
		},
		{
			MethodName: "Impersonate",
			Handler:    _RevilsRPC_Impersonate_Handler,
		},
		{
			MethodName: "RevToSelf",
			Handler:    _RevilsRPC_RevToSelf_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _RevilsRPC_GetSystem_Handler,
		},
		{
			MethodName: "Task",
			Handler:    _RevilsRPC_Task_Handler,
		},
		{
			MethodName: "Msf",
			Handler:    _RevilsRPC_Msf_Handler,
		},
		{
			MethodName: "MsfRemote",
			Handler:    _RevilsRPC_MsfRemote_Handler,
		},
		{
			MethodName: "ExecuteAssembly",
			Handler:    _RevilsRPC_ExecuteAssembly_Handler,
		},
		{
			MethodName: "Migrate",
			Handler:    _RevilsRPC_Migrate_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _RevilsRPC_Execute_Handler,
		},
		{
			MethodName: "ExecuteWindows",
			Handler:    _RevilsRPC_ExecuteWindows_Handler,
		},
		{
			MethodName: "Sideload",
			Handler:    _RevilsRPC_Sideload_Handler,
		},
		{
			MethodName: "SpawnDll",
			Handler:    _RevilsRPC_SpawnDll_Handler,
		},
		{
			MethodName: "Screenshot",
			Handler:    _RevilsRPC_Screenshot_Handler,
		},
		{
			MethodName: "CurrentTokenOwner",
			Handler:    _RevilsRPC_CurrentTokenOwner_Handler,
		},
		{
			MethodName: "PivotStartListener",
			Handler:    _RevilsRPC_PivotStartListener_Handler,
		},
		{
			MethodName: "PivotStopListener",
			Handler:    _RevilsRPC_PivotStopListener_Handler,
		},
		{
			MethodName: "PivotSessionListeners",
			Handler:    _RevilsRPC_PivotSessionListeners_Handler,
		},
		{
			MethodName: "PivotGraph",
			Handler:    _RevilsRPC_PivotGraph_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _RevilsRPC_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _RevilsRPC_StopService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _RevilsRPC_RemoveService_Handler,
		},
		{
			MethodName: "MakeToken",
			Handler:    _RevilsRPC_MakeToken_Handler,
		},
		{
			MethodName: "GetEnv",
			Handler:    _RevilsRPC_GetEnv_Handler,
		},
		{
			MethodName: "SetEnv",
			Handler:    _RevilsRPC_SetEnv_Handler,
		},
		{
			MethodName: "UnsetEnv",
			Handler:    _RevilsRPC_UnsetEnv_Handler,
		},
		{
			MethodName: "Backdoor",
			Handler:    _RevilsRPC_Backdoor_Handler,
		},
		{
			MethodName: "RegistryRead",
			Handler:    _RevilsRPC_RegistryRead_Handler,
		},
		{
			MethodName: "RegistryWrite",
			Handler:    _RevilsRPC_RegistryWrite_Handler,
		},
		{
			MethodName: "RegistryCreateKey",
			Handler:    _RevilsRPC_RegistryCreateKey_Handler,
		},
		{
			MethodName: "RegistryDeleteKey",
			Handler:    _RevilsRPC_RegistryDeleteKey_Handler,
		},
		{
			MethodName: "RegistryListSubKeys",
			Handler:    _RevilsRPC_RegistryListSubKeys_Handler,
		},
		{
			MethodName: "RegistryListValues",
			Handler:    _RevilsRPC_RegistryListValues_Handler,
		},
		{
			MethodName: "RunSSHCommand",
			Handler:    _RevilsRPC_RunSSHCommand_Handler,
		},
		{
			MethodName: "HijackDLL",
			Handler:    _RevilsRPC_HijackDLL_Handler,
		},
		{
			MethodName: "GetPrivs",
			Handler:    _RevilsRPC_GetPrivs_Handler,
		},
		{
			MethodName: "StartRportFwdListener",
			Handler:    _RevilsRPC_StartRportFwdListener_Handler,
		},
		{
			MethodName: "GetRportFwdListeners",
			Handler:    _RevilsRPC_GetRportFwdListeners_Handler,
		},
		{
			MethodName: "StopRportFwdListener",
			Handler:    _RevilsRPC_StopRportFwdListener_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _RevilsRPC_OpenSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _RevilsRPC_CloseSession_Handler,
		},
		{
			MethodName: "RegisterExtension",
			Handler:    _RevilsRPC_RegisterExtension_Handler,
		},
		{
			MethodName: "CallExtension",
			Handler:    _RevilsRPC_CallExtension_Handler,
		},
		{
			MethodName: "ListExtensions",
			Handler:    _RevilsRPC_ListExtensions_Handler,
		},
		{
			MethodName: "WGStartPortForward",
			Handler:    _RevilsRPC_WGStartPortForward_Handler,
		},
		{
			MethodName: "WGStopPortForward",
			Handler:    _RevilsRPC_WGStopPortForward_Handler,
		},
		{
			MethodName: "WGStartSocks",
			Handler:    _RevilsRPC_WGStartSocks_Handler,
		},
		{
			MethodName: "WGStopSocks",
			Handler:    _RevilsRPC_WGStopSocks_Handler,
		},
		{
			MethodName: "WGListForwarders",
			Handler:    _RevilsRPC_WGListForwarders_Handler,
		},
		{
			MethodName: "WGListSocksServers",
			Handler:    _RevilsRPC_WGListSocksServers_Handler,
		},
		{
			MethodName: "Shell",
			Handler:    _RevilsRPC_Shell_Handler,
		},
		{
			MethodName: "Portfwd",
			Handler:    _RevilsRPC_Portfwd_Handler,
		},
		{
			MethodName: "CreateSocks",
			Handler:    _RevilsRPC_CreateSocks_Handler,
		},
		{
			MethodName: "CloseSocks",
			Handler:    _RevilsRPC_CloseSocks_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _RevilsRPC_CreateTunnel_Handler,
		},
		{
			MethodName: "CloseTunnel",
			Handler:    _RevilsRPC_CloseTunnel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuilderRegister",
			Handler:       _RevilsRPC_BuilderRegister_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SocksProxy",
			Handler:       _RevilsRPC_SocksProxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TunnelData",
			Handler:       _RevilsRPC_TunnelData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _RevilsRPC_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcpb/services.proto",
}
